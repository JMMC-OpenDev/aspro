<?xml version="1.0"?>
<!--
 *******************************************************************************
 * JMMC project ( http://www.jmmc.fr ) - Copyright (C) CNRS.
 ******************************************************************************

 NAME
 vot2AsproObservation.xsl - Votable into Aspro2 observation setting

 DESCRIPTION
 This stylesheet transform one Votable (targets) into one aspro observation
 setting.
 
-->

<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
    xmlns:VOT11="http://www.ivoa.net/xml/VOTable/v1.1" >

  <xsl:output omit-xml-declaration="no" indent="yes"/>



  <xsl:template match="/">
    <xsl:apply-templates select="/VOT11:VOTABLE/VOT11:RESOURCE" />
  </xsl:template>





  <xsl:template match="/VOT11:VOTABLE/VOT11:RESOURCE">

    <!-- Extract PARAM values -->
    
    <!-- Main settings -->
    <xsl:variable name="INTERFEROMETER"   select="./VOT11:PARAM[@name = 'INTERFEROMETER']/@value"/>
    <xsl:variable name="PERIOD"           select="./VOT11:PARAM[@name = 'PERIOD']/@value"/>
    <xsl:variable name="INSTRUMENT"       select="./VOT11:PARAM[@name = 'INSTRUMENT']/@value"/>

    <!-- CHARA only -->
    <xsl:variable name="POPS"             select="./VOT11:PARAM[@name = 'POPS']/@value"/>
    <xsl:variable name="BEAMS"            select="./VOT11:PARAM[@name = 'BEAMS']/@value"/>
    
    <!-- Configuration(s) -->
    <xsl:variable name="CONFIGURATIONS"   select="./VOT11:PARAM[@name = 'CONFIGURATIONS']/@value"/>

    <!-- Constraints -->
    <xsl:variable name="NIGHT"            select="./VOT11:PARAM[@name = 'NIGHT']/@value"/>
    <xsl:variable name="DATE"             select="./VOT11:PARAM[@name = 'DATE']/@value"/>
    <xsl:variable name="MIN_ELEVATION"    select="./VOT11:PARAM[@name = 'MIN_ELEVATION']/@value"/>

<!--
    TODO: handle following parameters:

    <PARAM name="OPERATION" datatype="char" arraysize="*" value="NEW"/>

    <PARAM name="INTERFEROMETER_EDITABLE" datatype="boolean" value="false" />

    <PARAM name="PERIOD_EDITABLE" datatype="boolean" value="false" />

    <PARAM name="INSTRUMENT_EDITABLE" datatype="boolean" value="false" />

    <PARAM name="POPS_EDITABLE" datatype="boolean" value="true" />

    <PARAM name="CONFIGURATIONS_EDITABLE" datatype="boolean" value="true" />

    <PARAM name="NIGHT_EDITABLE" datatype="boolean" value="false" />

    <PARAM name="DATE_EDITABLE" datatype="boolean" value="false" />

    <PARAM name="MIN_ELEVATION_EDITABLE" datatype="boolean" value="false" />

    <PARAM name="TARGETS_EDITABLE" datatype="boolean" value="false" />
-->


    <!-- Locate fields in the votable (generated by mapping2xslt) -->
    <xsl:variable name="NAME_index">
      <xsl:call-template name="getColumnIndex">
        <xsl:with-param name="ucd11">meta.id;meta.main</xsl:with-param>
        <xsl:with-param name="ucd10">META.MAIN</xsl:with-param>
      </xsl:call-template>
    </xsl:variable>
    
    <xsl:variable name="RA_index">
      <xsl:call-template name="getColumnIndex">
        <xsl:with-param name="ucd11">pos.eq.ra;meta.main</xsl:with-param>
        <xsl:with-param name="ucd10">POS_EQ_RA_MAIN</xsl:with-param>
        <xsl:with-param name="unit">h:m:s</xsl:with-param>
      </xsl:call-template>
    </xsl:variable>
    <xsl:variable name="DEC_index">
      <xsl:call-template name="getColumnIndex">
        <xsl:with-param name="ucd11">pos.eq.dec;meta.main</xsl:with-param>
        <xsl:with-param name="ucd10">POS_EQ_DEC_MAIN</xsl:with-param>
        <xsl:with-param name="unit">d:m:s</xsl:with-param>
      </xsl:call-template>
    </xsl:variable>

    <xsl:variable name="RV_index">
      <xsl:call-template name="getColumnIndex">
        <xsl:with-param name="ucd11">spect.dopplerVeloc.opt</xsl:with-param>
        <xsl:with-param name="ucd10">VELOC_HC</xsl:with-param>
        <xsl:with-param name="unit">km.s-1</xsl:with-param>
      </xsl:call-template>
    </xsl:variable>

    <xsl:variable name="PMRA_index">
      <xsl:call-template name="getColumnIndex">
        <xsl:with-param name="ucd11">pos.pm;pos.eq.ra</xsl:with-param>
        <xsl:with-param name="ucd10">POS_EQ_PMRA</xsl:with-param>
        <xsl:with-param name="unit">mas.yr-1</xsl:with-param>
      </xsl:call-template>
    </xsl:variable>
    <xsl:variable name="PMDEC_index">
      <xsl:call-template name="getColumnIndex">
        <xsl:with-param name="ucd11">pos.pm;pos.eq.dec</xsl:with-param>
        <xsl:with-param name="ucd10">POS_EQ_PMDEC</xsl:with-param>
        <xsl:with-param name="unit">mas.yr-1</xsl:with-param>
      </xsl:call-template>
    </xsl:variable>

    <xsl:variable name="PLX_index">
      <xsl:call-template name="getColumnIndex">
        <xsl:with-param name="ucd11">pos.parallax.trig</xsl:with-param>
        <xsl:with-param name="ucd10">POS_PARLX_TRIG</xsl:with-param>
        <xsl:with-param name="unit">mas</xsl:with-param>
      </xsl:call-template>
    </xsl:variable>
    <xsl:variable name="e_PLX_index">
      <xsl:call-template name="getColumnIndex">
        <xsl:with-param name="ucd11">stat.error;pos.parallax.trig</xsl:with-param>
        <xsl:with-param name="ucd10">POS_PARLX_TRIG_ERROR</xsl:with-param>
        <xsl:with-param name="unit">mas</xsl:with-param>
      </xsl:call-template>
    </xsl:variable>

    <!-- TODO: avoid using column name : parse LINK or anything else -->
    <xsl:variable name="ID_HD_index">
      <xsl:call-template name="getColumnIndex">
        <xsl:with-param name="ucd11">meta.id</xsl:with-param>
        <xsl:with-param name="ucd10">META.ID</xsl:with-param>
        <xsl:with-param name="name">HD</xsl:with-param>
      </xsl:call-template>
    </xsl:variable>
    
    <xsl:variable name="ID_HIP_index">
      <xsl:call-template name="getColumnIndex">
        <xsl:with-param name="ucd11">meta.id</xsl:with-param>
        <xsl:with-param name="ucd10">META.ID</xsl:with-param>
        <xsl:with-param name="name">HIP</xsl:with-param>
      </xsl:call-template>
    </xsl:variable>

    <xsl:variable name="ID_2MASS_index">
      <xsl:call-template name="getColumnIndex">
        <xsl:with-param name="ucd11">meta.id</xsl:with-param>
        <xsl:with-param name="ucd10">META.ID</xsl:with-param>
        <xsl:with-param name="name">2MASS</xsl:with-param>
      </xsl:call-template>
    </xsl:variable>

    <xsl:variable name="ID_PIVOT_index">
      <xsl:call-template name="getColumnIndex">
        <xsl:with-param name="ucd11">meta.id</xsl:with-param>
        <xsl:with-param name="ucd10">META.ID</xsl:with-param>
        <xsl:with-param name="name">PIVOT</xsl:with-param>
      </xsl:call-template>
    </xsl:variable>

    <xsl:variable name="OTYPES_index">
      <xsl:call-template name="getColumnIndex">
        <xsl:with-param name="ucd11">src.class</xsl:with-param>
        <xsl:with-param name="ucd10"/>
      </xsl:call-template>
    </xsl:variable>
    
    <xsl:variable name="SP_TYPES_index">
      <xsl:call-template name="getColumnIndex">
        <xsl:with-param name="ucd11">src.spType</xsl:with-param>
        <xsl:with-param name="ucd10">SPECT_TYPE_MK</xsl:with-param>
      </xsl:call-template>
    </xsl:variable>
    
    <xsl:variable name="FLUX_V_index">
      <xsl:call-template name="getColumnIndex">
        <xsl:with-param name="ucd11">phot.mag;em.opt.V</xsl:with-param>
        <xsl:with-param name="ucd10">PHOT_JHN_V</xsl:with-param>
        <xsl:with-param name="unit">mag</xsl:with-param>
      </xsl:call-template>
    </xsl:variable>
    <xsl:variable name="FLUX_I_index">
      <xsl:call-template name="getColumnIndex">
        <xsl:with-param name="ucd11">phot.mag;em.opt.I</xsl:with-param>
        <xsl:with-param name="ucd10">PHOT_JHN_I</xsl:with-param>
        <xsl:with-param name="unit">mag</xsl:with-param>
      </xsl:call-template>
    </xsl:variable>
    <xsl:variable name="FLUX_J_index">
      <xsl:call-template name="getColumnIndex">
        <xsl:with-param name="ucd11">phot.mag;em.IR.J</xsl:with-param>
        <xsl:with-param name="ucd10">PHOT_JHN_J</xsl:with-param>
        <xsl:with-param name="unit">mag</xsl:with-param>
      </xsl:call-template>
    </xsl:variable>
    <xsl:variable name="FLUX_H_index">
      <xsl:call-template name="getColumnIndex">
        <xsl:with-param name="ucd11">phot.mag;em.IR.H</xsl:with-param>
        <xsl:with-param name="ucd10">PHOT_JHN_H</xsl:with-param>
        <xsl:with-param name="unit">mag</xsl:with-param>
      </xsl:call-template>
    </xsl:variable>
    <xsl:variable name="FLUX_K_index">
      <xsl:call-template name="getColumnIndex">
        <xsl:with-param name="ucd11">phot.mag;em.IR.K</xsl:with-param>
        <xsl:with-param name="ucd10">PHOT_JHN_K</xsl:with-param>
        <xsl:with-param name="unit">mag</xsl:with-param>
      </xsl:call-template>
    </xsl:variable>
    <xsl:variable name="FLUX_N_index">
      <xsl:call-template name="getColumnIndex">
        <xsl:with-param name="ucd11">phot.mag;em.IR.8-15um</xsl:with-param>
        <xsl:with-param name="ucd10">PHOT_JHN_N</xsl:with-param>
        <xsl:with-param name="unit">mag</xsl:with-param>
      </xsl:call-template>
    </xsl:variable>

    <xsl:variable name="EQUINOX" select="translate(//VOT11:COOSYS[1]/@equinox, 'J', '')"/>


<!-- starting output document -->
    <a:observationSetting
      xmlns:a="http://www.jmmc.fr/aspro-oi/0.1"
      xmlns:tm="http://www.jmmc.fr/jmcs/models/0.1"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xsi:schemaLocation="http://www.jmmc.fr/aspro-oi/0.1 AsproOIModel.xsd http://www.jmmc.fr/jmcs/models/0.1 targetModel.xsd">

      <xsl:comment>Generated by xslt script from votable</xsl:comment>
      
      <schemaVersion>2011.02</schemaVersion>
      <name>default</name>

      <xsl:if test="$NIGHT != '' or $DATE != ''">
        <when>
            <date><xsl:value-of select="$DATE"/></date>
            <nightRestriction><xsl:value-of select="$NIGHT"/></nightRestriction>
            <atmosphereQuality>Average</atmosphereQuality>
        </when>
      </xsl:if>
      
      <xsl:if test="$PERIOD != '' or $INTERFEROMETER != ''">
        <interferometerConfiguration>
            <xsl:choose>
              <xsl:when test="$PERIOD != ''">
                <name><xsl:value-of select="$PERIOD"/></name>
              </xsl:when>
              <xsl:otherwise>
                <name><xsl:value-of select="$INTERFEROMETER"/></name>
              </xsl:otherwise>
            </xsl:choose>

            <minElevation><xsl:value-of select="$MIN_ELEVATION"/></minElevation>

        </interferometerConfiguration>
      </xsl:if>

      <xsl:if test="$INSTRUMENT != '' and $CONFIGURATIONS != ''">
        <instrumentConfiguration>
            <name><xsl:value-of select="$INSTRUMENT"/></name>

            <!-- TODO: support multiples configurations -->
            <stations><xsl:value-of select="$CONFIGURATIONS"/></stations>

            <xsl:if test="$POPS != ''">
              <pops><xsl:value-of select="$POPS"/></pops>
            </xsl:if>
            <!--
              TODO: add beams
              <beams>V1 V2 V3</beams>

              <xsl:if test="$BEAMS != ''">
                <beams><xsl:value-of select="$POPS"/></beams>
              </xsl:if>
            -->

            <!-- optional parameters -->
  <!--
            <instrumentMode>standard</instrumentMode>
            <samplingPeriod>40.0</samplingPeriod>
            <acquisitionTime>300.0</acquisitionTime>
  -->          
        </instrumentConfiguration>
      </xsl:if>

      <!-- Build one target element per votable row -->
      <xsl:for-each select="./VOT11:TABLE/VOT11:DATA/VOT11:TABLEDATA/VOT11:TR">

        <xsl:variable name="ID_HD">
          <xsl:if test="./VOT11:TD[position()=$ID_HD_index]/text()">
            <xsl:value-of select="concat('HD ',./VOT11:TD[position()=$ID_HD_index])"/>
          </xsl:if>
        </xsl:variable>
        <xsl:variable name="ID_HIP">
          <xsl:if test="./VOT11:TD[position()=$ID_HIP_index]/text()">
            <xsl:value-of select="concat('HIP ',./VOT11:TD[position()=$ID_HIP_index])"/>
          </xsl:if>
        </xsl:variable>
        <xsl:variable name="ID_2MASS">
          <xsl:if test="./VOT11:TD[position()=$ID_2MASS_index]/text()">
            <xsl:value-of select="concat('2MASS J',./VOT11:TD[position()=$ID_2MASS_index])"/>
          </xsl:if>
        </xsl:variable>
        <xsl:variable name="ID_PIVOT">
          <xsl:if test="./VOT11:TD[position()=$ID_PIVOT_index]/text()">
            <xsl:value-of select="concat('PIVOT ',./VOT11:TD[position()=$ID_PIVOT_index])"/>
          </xsl:if>
        </xsl:variable>

        <xsl:variable name="RA">
          <xsl:if test="./VOT11:TD[position()=$RA_index]/text()">
            <xsl:value-of select="translate(./VOT11:TD[position()=$RA_index], ' ', ':')"/>
          </xsl:if>
        </xsl:variable>
        <xsl:variable name="DEC">
          <xsl:if test="./VOT11:TD[position()=$DEC_index]/text()">
            <xsl:value-of select="translate(./VOT11:TD[position()=$DEC_index], ' ', ':')"/>
          </xsl:if>
        </xsl:variable>

        <xsl:variable name="NAME"     select="./VOT11:TD[position()=$NAME_index]"/>
        <xsl:variable name="RV"       select="./VOT11:TD[position()=$RV_index]"/>
        <xsl:variable name="PMRA"     select="./VOT11:TD[position()=$PMRA_index]"/>
        <xsl:variable name="PMDEC"    select="./VOT11:TD[position()=$PMDEC_index]"/>
        <xsl:variable name="PLX"      select="./VOT11:TD[position()=$PLX_index]"/>
        <xsl:variable name="e_PLX"    select="./VOT11:TD[position()=$e_PLX_index]"/>
        <xsl:variable name="OTYPES"   select="./VOT11:TD[position()=$OTYPES_index]"/>
        <xsl:variable name="SP_TYPES" select="./VOT11:TD[position()=$SP_TYPES_index]"/>
        <xsl:variable name="FLUX_V"   select="./VOT11:TD[position()=$FLUX_V_index]"/>
        <xsl:variable name="FLUX_I"   select="./VOT11:TD[position()=$FLUX_I_index]"/>
        <xsl:variable name="FLUX_J"   select="./VOT11:TD[position()=$FLUX_J_index]"/>
        <xsl:variable name="FLUX_H"   select="./VOT11:TD[position()=$FLUX_H_index]"/>
        <xsl:variable name="FLUX_K"   select="./VOT11:TD[position()=$FLUX_K_index]"/>
        <xsl:variable name="FLUX_N"   select="./VOT11:TD[position()=$FLUX_N_index]"/>

        <xsl:if test="$NAME/text() and $RA != '' and $DEC != ''">
          <target>
            <!-- no id attribute : defined by Aspro2 -->

            <!-- identifier -->
            <name>
              <xsl:value-of select="$NAME"/>
            </name>

            <!-- position -->
            <RA>
              <xsl:value-of select="$RA"/>
            </RA>
            <DEC>
              <xsl:value-of select="$DEC"/>
            </DEC>
            <EQUINOX>
              <xsl:value-of select="$EQUINOX"/>
            </EQUINOX>

            <!-- radial velocity -->
            <xsl:if test="$RV/text()">
              <SYSVEL>
                <xsl:value-of select="$RV"/>
              </SYSVEL>
            </xsl:if>

            <!-- proper motion -->
            <xsl:if test="$PMRA/text()">
              <PMRA>
                <xsl:value-of select="$PMRA"/>
              </PMRA>
            </xsl:if>
            <xsl:if test="$PMDEC/text()">
              <PMDEC>
                <xsl:value-of select="$PMDEC"/>
              </PMDEC>
            </xsl:if>

            <!-- parallax -->
            <xsl:if test="$PLX/text()">
              <PARALLAX>
                <xsl:value-of select="$PLX"/>
              </PARALLAX>
            </xsl:if>
            <xsl:if test="$e_PLX/text()">
              <PARA_ERR>
                <xsl:value-of select="$e_PLX"/>
              </PARA_ERR>
            </xsl:if>

            <!-- identifiers (HD, HIP, 2MASS, PIVOT) -->
            <IDS>
              <xsl:if test="$ID_HD != ''"><xsl:value-of select="$ID_HD"/>,</xsl:if>
              <xsl:if test="$ID_HIP != ''"><xsl:value-of select="$ID_HIP"/>,</xsl:if>
              <xsl:if test="$ID_2MASS != ''"><xsl:value-of select="$ID_2MASS"/>,</xsl:if>
              <xsl:if test="$ID_PIVOT != ''"><xsl:value-of select="$ID_PIVOT"/>,</xsl:if>
            </IDS>

            <!-- object types -->
            <xsl:if test="$OTYPES/text()">
              <OBJTYP>
                <xsl:value-of select="$OTYPES"/>
              </OBJTYP>
            </xsl:if>

            <!-- spectral types -->
            <xsl:if test="$SP_TYPES/text()">
              <SPECTYP>
                <xsl:value-of select="$SP_TYPES"/>
              </SPECTYP>
            </xsl:if>

            <!-- magnitudes -->
            <xsl:if test="$FLUX_V/text()">
              <FLUX_V>
                <xsl:value-of select="$FLUX_V"/>
              </FLUX_V>
            </xsl:if>
            <xsl:if test="$FLUX_I/text()">
              <FLUX_I>
                <xsl:value-of select="$FLUX_I"/>
              </FLUX_I>
            </xsl:if>
            <xsl:if test="$FLUX_J/text()">
              <FLUX_J>
                <xsl:value-of select="$FLUX_J"/>
              </FLUX_J>
            </xsl:if>
            <xsl:if test="$FLUX_H/text()">
              <FLUX_H>
                <xsl:value-of select="$FLUX_H"/>
              </FLUX_H>
            </xsl:if>
            <xsl:if test="$FLUX_K/text()">
              <FLUX_K>
                <xsl:value-of select="$FLUX_K"/>
              </FLUX_K>
            </xsl:if>
            <xsl:if test="$FLUX_N/text()">
              <FLUX_N>
                <xsl:value-of select="$FLUX_N"/>
              </FLUX_N>
            </xsl:if>

          </target>
        </xsl:if>

      </xsl:for-each>

      <xsl:if test="$CONFIGURATIONS != ''">
        <variant>
            <!-- TODO: support multiples configurations -->
            <stations><xsl:value-of select="$CONFIGURATIONS"/></stations>
        </variant>
      </xsl:if>
      
    </a:observationSetting>

  </xsl:template>




  <xsl:template name="getColumnIndex">
    <xsl:param name="ucd11"/>
    <xsl:param name="ucd10"/>
    <xsl:param name="name"/>
    <xsl:param name="unit"/>
    
    <xsl:variable name="selNodeId">
      <xsl:choose>
        <xsl:when test="$unit">
          <xsl:value-of select="generate-id(/VOT11:VOTABLE/VOT11:RESOURCE/VOT11:TABLE/VOT11:FIELD[contains(@unit, $unit) and (@ucd = $ucd11 or @ucd = $ucd10)])" />
        </xsl:when>
        <xsl:when test="$name">
          <xsl:value-of select="generate-id(/VOT11:VOTABLE/VOT11:RESOURCE/VOT11:TABLE/VOT11:FIELD[@name = $name and (@ucd = $ucd11 or @ucd = $ucd10)])" />
        </xsl:when>
        <xsl:otherwise>
          <xsl:value-of select="generate-id(/VOT11:VOTABLE/VOT11:RESOURCE/VOT11:TABLE/VOT11:FIELD[@ucd = $ucd11 or @ucd = $ucd10])" />
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    
    <xsl:if test="$selNodeId != ''">
      <xsl:for-each select="/VOT11:VOTABLE/VOT11:RESOURCE/VOT11:TABLE/VOT11:FIELD">
        <xsl:if test="$selNodeId = generate-id(.)">
          <xsl:value-of select="position()" />
        </xsl:if>
      </xsl:for-each>
    </xsl:if>
    
  </xsl:template>

</xsl:stylesheet>
