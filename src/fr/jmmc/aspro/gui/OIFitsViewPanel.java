/*******************************************************************************
 * JMMC project ( http://www.jmmc.fr ) - Copyright (C) CNRS.
 ******************************************************************************/
package fr.jmmc.aspro.gui;

import fr.jmmc.oiexplorer.core.gui.chart.PDFOptions;
import fr.jmmc.aspro.model.event.OIFitsEvent;
import fr.jmmc.aspro.model.event.ObservationEvent;
import fr.jmmc.aspro.model.event.ObservationListener;
import fr.jmmc.oiexplorer.core.gui.PDFExportable;
import fr.jmmc.oiexplorer.core.gui.Vis2Panel;
import fr.jmmc.oiexplorer.core.model.OIFitsCollectionManager;
import fr.jmmc.oiexplorer.core.model.TargetUID;
import fr.jmmc.oitools.model.OIFitsFile;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.jfree.chart.JFreeChart;

/**
 * This panel embeds the OIFitsExplorer into Aspro2
 * @author bourgesl
 */
public final class OIFitsViewPanel extends javax.swing.JPanel implements ObservationListener, PDFExportable {

  /** default serial UID for Serializable interface */
  private static final long serialVersionUID = 1;
  /** Class logger */
  private static final Logger logger = LoggerFactory.getLogger(OIFitsViewPanel.class.getName());

  /* members */
  /** Oifits explorer Vis2Plot */
  private Vis2Panel vis2Panel;

  /**
   * Constructor
   */
  public OIFitsViewPanel() {
    initComponents();

    postInit();
  }

  /**
   * This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    jPanelCenter = new javax.swing.JPanel();
    jLabelMessage = new javax.swing.JLabel();

    setLayout(new java.awt.BorderLayout());

    jPanelCenter.setBackground(new java.awt.Color(255, 255, 255));
    jPanelCenter.setLayout(new javax.swing.BoxLayout(jPanelCenter, javax.swing.BoxLayout.Y_AXIS));

    jLabelMessage.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    jLabelMessage.setText("LABEL");
    jLabelMessage.setAlignmentX(0.5F);
    jPanelCenter.add(jLabelMessage);

    add(jPanelCenter, java.awt.BorderLayout.CENTER);
  }// </editor-fold>//GEN-END:initComponents

  /**
   * Export the chart component as a PDF document
   */
  @Override
  public void performPDFAction() {
    this.vis2Panel.performPDFAction();
  }

  /**
   * Return the PDF default file name
   * @return PDF default file name
   */
  @Override
  public String getPDFDefaultFileName() {
    return this.vis2Panel.getPDFDefaultFileName();
  }

  /**
   * Return the PDF options
   * @return PDF options
   */
  @Override
  public PDFOptions getPDFOptions() {
    return this.vis2Panel.getPDFOptions();
  }

  /**
   * Return the chart to export as a PDF document
   * @return chart
   */
  @Override
  public JFreeChart prepareChart() {
    return this.vis2Panel.prepareChart();
  }

  /**
   * Callback indicating the chart was processed by the PDF engine
   */
  @Override
  public void postPDFExport() {
    this.vis2Panel.postPDFExport();
  }

  /**
   * This method is useful to set the models and specific features of initialized swing components :
   */
  private void postInit() {
    this.vis2Panel = new Vis2Panel();

    this.jPanelCenter.add(this.vis2Panel);
  }

  /**
   * Handle the changed event to plot the vis2 plot synchronously.
   * @param event event
   */
  @Override
  public void onProcess(final ObservationEvent event) {
    if (logger.isDebugEnabled()) {
      logger.debug("event [{}] process IN", event.getType());
    }
    switch (event.getType()) {
      case OIFITS_DONE:
        if (event instanceof OIFitsEvent) {
          this.plot(((OIFitsEvent) event).getOIFitsFile());
        }
        break;
      default:
    }
    if (logger.isDebugEnabled()) {
      logger.debug("event [{}] process OUT", event.getType());
    }
  }

  /**
   * Plot the squarred visibilities of the generated file synchronously.
   * This code must be executed by the Swing Event Dispatcher thread (EDT)
   * @param oiFitsFile OIFits file to use
   */
  private void plot(final OIFitsFile oiFitsFile) {
    logger.debug("plot : {}", oiFitsFile);

    // Extract the single target from OIFitsFile:
    final TargetUID target;
    if (oiFitsFile != null) {
      target = new TargetUID(oiFitsFile.getOiTarget().getTarget()[0]);
    } else {
      target = null;
    }

    if (oiFitsFile == null) {
      this.jLabelMessage.setText("No VIS2 data available: the target is not observable or multiple configurations are selected.");
      showMessage(true);
      // reset plot anyway:
      this.vis2Panel.plot(target, oiFitsFile);
    } else {
      // analyse data:
      OIFitsCollectionManager.getInstance().reset();
      
      oiFitsFile.setAbsoluteFilePath("ASPRO2");
      OIFitsCollectionManager.getInstance().addOIFitsFile(oiFitsFile);
      
      // TODO: use OIFitsManager & collection ...
      
      // TODO: Disable FLAGS
      
      final OIFitsFile oiFitsTarget = OIFitsCollectionManager.getInstance().getOIFitsCollection().getOiDataList(target);
      
      // plot data:
      this.vis2Panel.plot(target, oiFitsTarget);

      final boolean hasData = this.vis2Panel.isHasData();
      if (!hasData) {
        this.jLabelMessage.setText("No VIS2 data available: the target has no model.");
      }

      showMessage(!hasData);
    }
  }

  /**
   * Show message or plot
   * @param show flag to indicate to show label
   */
  private void showMessage(final boolean show) {
    this.jLabelMessage.setVisible(show);
    this.vis2Panel.setVisible(!show);
  }
  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JLabel jLabelMessage;
  private javax.swing.JPanel jPanelCenter;
  // End of variables declaration//GEN-END:variables
}
