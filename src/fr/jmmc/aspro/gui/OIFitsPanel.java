/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * OIFitsPanel.java
 *
 * Created on 22 juin 2010, 10:56:23
 */
package fr.jmmc.aspro.gui;

import fr.jmmc.aspro.model.ObservationListener;
import fr.jmmc.aspro.model.oi.ObservationSetting;
import fr.jmmc.aspro.util.XmlFactory;
import fr.jmmc.oitools.model.OIFitsFile;
import java.util.logging.Level;
import javax.swing.text.html.HTMLEditorKit;

/**
 * This panel presents a simple HTML representation of the current OIFits file
 * @author bourgesl
 */
public final class OIFitsPanel extends javax.swing.JPanel implements ObservationListener {

  /** default serial UID for Serializable interface */
  private static final long serialVersionUID = 1;
  /** Class Name */
  private static final String className_ = "fr.jmmc.aspro.gui.OIFitsPanel";
  /** Class logger */
  private static final java.util.logging.Logger logger = java.util.logging.Logger.getLogger(
          className_);
  /** XSLT file path */
  private final static String XSLT_FILE = "fr/jmmc/aspro/gui/oiview.xsl";

  /** Creates new form OIFitsPanel */
  public OIFitsPanel() {
    initComponents();

    postInit();
  }

  /**
   * This method is useful to set the models and specific features of initialized swing components :
   */
  private void postInit() {
    // nothing to do
    // add a HTMLEditorKit to the editor pane

    jOutputPane.setEditorKit(new HTMLEditorKit());
  }

  /**
   * Handle the given event on the given observation =
   * If the oifits is computed, refresh the UI widgets
   * @param type event type
   * @param observation observation
   */
  public void onProcess(final ObservationEventType type, final ObservationSetting observation) {
    if (logger.isLoggable(Level.FINE)) {
      logger.fine("event [" + type + "] process IN");
    }
    switch (type) {
      case OIFITS_DONE:
        this.updateOIFits(observation.getOIFitsFile());
        break;
      default:
        // reset content :
        this.updateOIFits(null);
    }
    if (logger.isLoggable(Level.FINE)) {
      logger.fine("event [" + type + "] process OUT");
    }
  }

  /**
   * Update widgets with the computed OIFits structure
   * @param oiFitsFile computed OIFits structure
   */
  private void updateOIFits(final OIFitsFile oiFitsFile) {
    String document = "";

    if (oiFitsFile != null) {
      final long start = System.nanoTime();

      document = oiFitsFile.getXmlDesc(true, true);

      // use an XSLT to transform the XML document to an HTML representation :
      document = XmlFactory.transform(document, XSLT_FILE);

      if (logger.isLoggable(Level.FINE)) {
        logger.fine("update : " + 1e-6d * (System.nanoTime() - start) + " ms.");
      }
    }

    this.jOutputPane.setText(document);
    this.jOutputPane.setCaretPosition(0);
  }

  /**
   * This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    jScrollPane = new javax.swing.JScrollPane();
    jOutputPane = new javax.swing.JEditorPane();

    setLayout(new java.awt.BorderLayout());

    jScrollPane.setPreferredSize(new java.awt.Dimension(300, 300));

    jOutputPane.setContentType("text/html");
    jOutputPane.setEditable(false);
    jScrollPane.setViewportView(jOutputPane);

    add(jScrollPane, java.awt.BorderLayout.CENTER);
  }// </editor-fold>//GEN-END:initComponents
  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JEditorPane jOutputPane;
  private javax.swing.JScrollPane jScrollPane;
  // End of variables declaration//GEN-END:variables
}
