/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * BasicObservationForm.java
 *
 * Created on 14 oct. 2009, 10:08:33
 */

package fr.jmmc.aspro.gui;

import fr.jmmc.aspro.model.ConfigurationManager;
import fr.jmmc.mcs.astro.star.Star;
import fr.jmmc.mcs.astro.star.StarResolverWidget;
import java.awt.GridBagConstraints;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Observable;
import java.util.Observer;
import java.util.Vector;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JSpinner;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;

/**
 *
 * @author bourgesl
 */
public class BasicObservationForm extends javax.swing.JPanel implements ChangeListener, ActionListener, Observer {

  private StarResolverWidget starSearchField;

    /** Creates new form BasicObservationForm */
    public BasicObservationForm() {
        initComponents();
        postInit();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {
    java.awt.GridBagConstraints gridBagConstraints;

    jLabel1 = new javax.swing.JLabel();
    jDateSpinner = new javax.swing.JSpinner();
    jComboBoxInterferometer = new javax.swing.JComboBox();
    jLabel2 = new javax.swing.JLabel();
    jLabel3 = new javax.swing.JLabel();
    jComboBoxInstrument = new javax.swing.JComboBox();
    jLabel4 = new javax.swing.JLabel();
    jComboBoxTargets = new javax.swing.JComboBox();
    jLabel5 = new javax.swing.JLabel();
    jComboBoxPeriod = new javax.swing.JComboBox();

    setLayout(new java.awt.GridBagLayout());

    jLabel1.setText("Date");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
    add(jLabel1, gridBagConstraints);

    jDateSpinner.setModel(new javax.swing.SpinnerDateModel());
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.ipadx = 2;
    gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
    add(jDateSpinner, gridBagConstraints);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.ipadx = 2;
    gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
    add(jComboBoxInterferometer, gridBagConstraints);

    jLabel2.setText("Interferometer");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.ipadx = 5;
    gridBagConstraints.ipady = 4;
    add(jLabel2, gridBagConstraints);

    jLabel3.setText("Instrument");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 2;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    add(jLabel3, gridBagConstraints);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 2;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.ipadx = 2;
    gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
    add(jComboBoxInstrument, gridBagConstraints);

    jLabel4.setText("Targets");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 3;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    add(jLabel4, gridBagConstraints);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 3;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.ipadx = 2;
    gridBagConstraints.ipady = 1;
    gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
    add(jComboBoxTargets, gridBagConstraints);

    jLabel5.setText("Period");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 2;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.ipadx = 3;
    add(jLabel5, gridBagConstraints);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 3;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.ipadx = 2;
    gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
    add(jComboBoxPeriod, gridBagConstraints);
  }// </editor-fold>//GEN-END:initComponents

  /**
   * This method is useful to set the models and specific features of initialized swing components :
   */
  private void postInit() {

    // add StarResolverWidget :
    final Star star = new Star();
    star.addObserver(this);

    this.starSearchField = new StarResolverWidget(star);

    GridBagConstraints gridBagConstraints = new GridBagConstraints();
    gridBagConstraints.gridx = 2;
    gridBagConstraints.gridy = 3;
    gridBagConstraints.gridwidth = 2;
    add(starSearchField, gridBagConstraints);

    // update component models :
    jDateSpinner.setEditor(new JSpinner.DateEditor(jDateSpinner, "dd/MM/yyyy"));
    jDateSpinner.addChangeListener(this);

    jComboBoxInterferometer.addActionListener(this);
    jComboBoxInterferometer.setModel(new DefaultComboBoxModel(ConfigurationManager.getInstance().getInterferometerNames()));
    jComboBoxInterferometer.setEnabled((jComboBoxInterferometer.getModel().getSize() > 1));

    // dependent combo boxes :
    jComboBoxPeriod.addActionListener(this);
    jComboBoxInstrument.addActionListener(this);

    updateComboPeriod();
    updateComboInstrument();
    updateObservation();

    jComboBoxTargets.setEditable(true);
    jComboBoxTargets.addActionListener(this);
  }

  private void updateComboPeriod() {
    final Vector v = ConfigurationManager.getInstance().getInterferometerConfigurationNames((String)jComboBoxInterferometer.getSelectedItem());
    jComboBoxPeriod.setModel(new DefaultComboBoxModel(v));
    jComboBoxPeriod.setEnabled((v.size() > 1));
  }

  private void updateComboInstrument() {
    final Vector v = ConfigurationManager.getInstance().getInterferometerInstrumentNames((String)jComboBoxPeriod.getSelectedItem());
    jComboBoxInstrument.setModel(new DefaultComboBoxModel(v));
    jComboBoxInstrument.setEnabled((v.size() > 1));
  }

  public void actionPerformed(ActionEvent e) {
    if (e.getSource() == jComboBoxInterferometer) {
      System.out.println("Interferometer changed : " + jComboBoxInterferometer.getSelectedItem());
      updateComboPeriod();
      updateComboInstrument();
    }
    else
    if (e.getSource() == jComboBoxPeriod) {
      System.out.println("Period changed : " + jComboBoxPeriod.getSelectedItem());
      updateComboInstrument();
    }
    else
    if (e.getSource() == jComboBoxInstrument) {
      System.out.println("Instrument changed : " + jComboBoxInstrument.getSelectedItem());
    }
    else
    if (e.getSource() == jComboBoxTargets) {
      System.out.println("Target changed : " + jComboBoxTargets.getSelectedItem());
    }
    updateObservation();
  }

  public void stateChanged(ChangeEvent e) {
    if (e.getSource() == jDateSpinner) {
      System.out.println("Date changed : " + jDateSpinner.getModel().getValue());
    }
    updateObservation();
  }

  /**
   * Observer implementation used for the StarResolver
   * @param o Observable instance
   * @param arg optional argument
   */
  public void update(Observable o, Object arg) {
    if (o instanceof Star) {
      System.out.println("Star changed:\n" + o);
    }
  }

  private void updateObservation() {
//    ObservationManager.getInstance().getObservation().setInstrumentConfiguration(new FocalInstrumentConfigurationChoice());
      System.out.println("Observation changed !");
  }


  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JComboBox jComboBoxInstrument;
  private javax.swing.JComboBox jComboBoxInterferometer;
  private javax.swing.JComboBox jComboBoxPeriod;
  private javax.swing.JComboBox jComboBoxTargets;
  private javax.swing.JSpinner jDateSpinner;
  private javax.swing.JLabel jLabel1;
  private javax.swing.JLabel jLabel2;
  private javax.swing.JLabel jLabel3;
  private javax.swing.JLabel jLabel4;
  private javax.swing.JLabel jLabel5;
  // End of variables declaration//GEN-END:variables

}
