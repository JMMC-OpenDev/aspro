/*******************************************************************************
 * JMMC project
 *
 * "@(#) $Id: BasicObservationForm.java,v 1.5 2009-10-22 15:47:22 bourgesl Exp $"
 *
 * History
 * -------
 * $Log: not supported by cvs2svn $
 *
 *
 ******************************************************************************/
package fr.jmmc.aspro.gui;

import fr.jmmc.aspro.model.ConfigurationManager;
import fr.jmmc.aspro.model.ObservationManager;
import fr.jmmc.mcs.astro.star.Star;
import fr.jmmc.mcs.astro.star.StarResolverWidget;
import java.awt.GridBagConstraints;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Date;
import java.util.Observable;
import java.util.Observer;
import java.util.Vector;
import java.util.logging.Level;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JSpinner;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;

/**
 *
 * @author bourgesl
 */
public class BasicObservationForm extends javax.swing.JPanel implements ChangeListener, ActionListener, Observer {

  /** Class Name */
  private static final String className_ = "fr.jmmc.aspro.gui.BasicObservationForm";
  /** Class logger */
  private static java.util.logging.Logger logger = java.util.logging.Logger.getLogger(
          className_);

  /** observation manager */
  private ObservationManager om = ObservationManager.getInstance();

  /** star resolver widget */
  private StarResolverWidget starSearchField;

  /** Creates new form BasicObservationForm */
  public BasicObservationForm() {
    initComponents();
    postInit();
  }

  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {
    java.awt.GridBagConstraints gridBagConstraints;

    jLabel1 = new javax.swing.JLabel();
    jDateSpinner = new javax.swing.JSpinner();
    jComboBoxInterferometer = new javax.swing.JComboBox();
    jLabel2 = new javax.swing.JLabel();
    jLabel3 = new javax.swing.JLabel();
    jComboBoxInstrument = new javax.swing.JComboBox();
    jLabel4 = new javax.swing.JLabel();
    jComboBoxTargets = new javax.swing.JComboBox();
    jLabel5 = new javax.swing.JLabel();
    jComboBoxInterferometerConfiguration = new javax.swing.JComboBox();

    setLayout(new java.awt.GridBagLayout());

    jLabel1.setText("Date");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
    add(jLabel1, gridBagConstraints);

    jDateSpinner.setModel(new javax.swing.SpinnerDateModel());
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.ipadx = 2;
    gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
    add(jDateSpinner, gridBagConstraints);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.ipadx = 2;
    gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
    add(jComboBoxInterferometer, gridBagConstraints);

    jLabel2.setText("Interferometer");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.ipadx = 5;
    gridBagConstraints.ipady = 4;
    add(jLabel2, gridBagConstraints);

    jLabel3.setText("Instrument");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 2;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    add(jLabel3, gridBagConstraints);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 2;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.ipadx = 2;
    gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
    add(jComboBoxInstrument, gridBagConstraints);

    jLabel4.setText("Targets");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 3;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    add(jLabel4, gridBagConstraints);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 3;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.ipadx = 2;
    gridBagConstraints.ipady = 1;
    gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
    add(jComboBoxTargets, gridBagConstraints);

    jLabel5.setText("Period");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 2;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.ipadx = 3;
    add(jLabel5, gridBagConstraints);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 3;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.ipadx = 2;
    gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
    add(jComboBoxInterferometerConfiguration, gridBagConstraints);
  }// </editor-fold>//GEN-END:initComponents

  /**
   * This method is useful to set the models and specific features of initialized swing components :
   */
  private void postInit() {

    // add StarResolverWidget :
    final Star star = new Star();
    star.addObserver(this);

    this.starSearchField = new StarResolverWidget(star);

    GridBagConstraints gridBagConstraints = new GridBagConstraints();
    gridBagConstraints.gridx = 2;
    gridBagConstraints.gridy = 3;
    gridBagConstraints.gridwidth = 2;
    add(starSearchField, gridBagConstraints);

    // update component models :
    jDateSpinner.addChangeListener(this);
    jDateSpinner.setEditor(new JSpinner.DateEditor(jDateSpinner, "dd/MM/yyyy"));

    jComboBoxInterferometer.addActionListener(this);
    jComboBoxInterferometer.setModel(new DefaultComboBoxModel(ConfigurationManager.getInstance().getInterferometerNames()));

    // dependent combo boxes :
    jComboBoxInterferometerConfiguration.addActionListener(this);
    jComboBoxInstrument.addActionListener(this);

    updateComboInterferometerConfiguration();
    updateComboInstrument();
    updateObservation();

    jComboBoxTargets.addActionListener(this);
  }

  private void updateComboInterferometerConfiguration() {
    final Vector v = ConfigurationManager.getInstance().getInterferometerConfigurationNames((String) jComboBoxInterferometer.getSelectedItem());
    jComboBoxInterferometerConfiguration.setModel(new DefaultComboBoxModel(v));
  }

  private void updateComboInstrument() {
    final Vector v = ConfigurationManager.getInstance().getInterferometerInstrumentNames((String) jComboBoxInterferometerConfiguration.getSelectedItem());
    jComboBoxInstrument.setModel(new DefaultComboBoxModel(v));
  }

  public void actionPerformed(ActionEvent e) {
    if (e.getSource() == jComboBoxInterferometer) {
      if (logger.isLoggable(Level.FINE)) {
        logger.fine("Interferometer changed : " + jComboBoxInterferometer.getSelectedItem());
      }
      updateComboInterferometerConfiguration();
      updateComboInstrument();
    } else if (e.getSource() == jComboBoxInterferometerConfiguration) {
      if (logger.isLoggable(Level.FINE)) {
        logger.fine("Interferometer Configuration changed : " + jComboBoxInterferometerConfiguration.getSelectedItem());
      }
      updateComboInstrument();
    } else if (e.getSource() == jComboBoxInstrument) {
      if (logger.isLoggable(Level.FINE)) {
        logger.fine("Instrument changed : " + jComboBoxInstrument.getSelectedItem());
      }
    } else if (e.getSource() == jComboBoxTargets) {
      if (logger.isLoggable(Level.FINE)) {
        logger.fine("Target changed : " + jComboBoxTargets.getSelectedItem());
      }
    }
    updateObservation();
  }

  public void stateChanged(final ChangeEvent ce) {
    if (ce.getSource() == jDateSpinner) {
      if (logger.isLoggable(Level.FINE)) {
        logger.fine("Date changed : " + jDateSpinner.getModel().getValue());
      }
    }
    updateObservation();
  }

  /**
   * Observer implementation used for the StarResolver
   * @param o Observable instance
   * @param arg optional argument
   */
  public void update(Observable o, Object arg) {
    if (o instanceof Star) {
      final Star s = (Star)o;
      if (logger.isLoggable(Level.FINE)) {
        logger.fine("Star search Field : " + this.starSearchField.getText() + "\n" + s);
      }
      /*
      Strings = {OTYPELIST=IR,X,*,Be*,UV,**,*iC,*iN,Em*, RA=03 47 29.0765, DEC=+24 06 18.494}
      Doubles = {FLUX_H=2.735, RA_d=56.8711521, DEC_d=24.1051372, FLUX_K=2.636, FLUX_J=2.735, FLUX_V=2.873}
       */
      // TODO : voir avec sylvain comment eviter des appels r√©currents

      // degrees :
      final Double RA_d = s.getPropertyAsDouble(Star.Property.RA_d);
      final Double DE_d = s.getPropertyAsDouble(Star.Property.DEC_d);
      if (RA_d != null && DE_d != null) {
        final String name = this.starSearchField.getText().toUpperCase();

        if (om.addTarget(name, RA_d, DE_d)) {
          // update target list :
          updateComboTargets();

          om.fireObservationChanged();
        }
      }
    }
  }

  private void updateComboTargets() {
    final Vector v = om.getTargetNames();
    jComboBoxTargets.setModel(new DefaultComboBoxModel(v));
  }


  private void updateObservation() {

    boolean changed = false;

    changed |= om.setWhen((Date) jDateSpinner.getModel().getValue());
    changed |= om.setInterferometerConfigurationName((String)jComboBoxInterferometerConfiguration.getSelectedItem());
    changed |= om.setInstrumentConfigurationName((String)jComboBoxInstrument.getSelectedItem());

    // Then fire the refresh model event :
    if (changed) {
      om.fireObservationChanged();
    }
  }

  
  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JComboBox jComboBoxInstrument;
  private javax.swing.JComboBox jComboBoxInterferometer;
  private javax.swing.JComboBox jComboBoxInterferometerConfiguration;
  private javax.swing.JComboBox jComboBoxTargets;
  private javax.swing.JSpinner jDateSpinner;
  private javax.swing.JLabel jLabel1;
  private javax.swing.JLabel jLabel2;
  private javax.swing.JLabel jLabel3;
  private javax.swing.JLabel jLabel4;
  private javax.swing.JLabel jLabel5;
  // End of variables declaration//GEN-END:variables
}
