/*******************************************************************************
 * JMMC project ( http://www.jmmc.fr ) - Copyright (C) CNRS.
 ******************************************************************************/
package fr.jmmc.aspro.gui.util;

import fr.jmmc.aspro.gui.util.UserModelAnimator.UserModelAnimatorListener;
import fr.jmmc.aspro.model.oi.UserModel;
import fr.jmmc.jmcs.gui.component.Disposable;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * This simple panels interacts with the UserModelAnimator singleton to configure it at runtime
 * @author bourgesl
 */
public final class AnimatorPanel extends javax.swing.JPanel implements UserModelAnimatorListener, ActionListener, ChangeListener, Disposable {

    /** default serial UID for Serializable interface */
    private static final long serialVersionUID = 1L;
    /** Class logger */
    private static final Logger _logger = LoggerFactory.getLogger(AnimatorPanel.class.getName());
    /** user model animator singleton */
    private final static UserModelAnimator ANIMATOR = UserModelAnimator.getInstance();
    /** min image refresh period = 40 ms ie 25/s */
    private static final int MIN_REFRESH_PERIOD = 40;

    /* members */
    /** monitored user model animator listener */
    private final UserModelAnimatorListener listener;
    /** current user model to refresh images */
    private UserModel currentUserModel = null;

    /** 
     * Creates new form AnimatorPanel 
     */
    public AnimatorPanel() {
        this(null, false);
    }

    /** 
     * Creates new form AnimatorPanel 
     * @param listener monitored user model animator listener
     * @param enableAutoRefresh enable auto refresh
     */
    public AnimatorPanel(final UserModelAnimatorListener listener, final boolean enableAutoRefresh) {
        this.listener = listener;

        initComponents();
        postInit(enableAutoRefresh);
    }

    /**
     * Free any resource or reference to this instance
     */
    @Override
    public void dispose() {
        enableAnimator(false);
    }

    /**
     * Initialize the Swing components
     * @param enableAutoRefresh enable auto refresh
     */
    private void postInit(final boolean enableAutoRefresh) {
        jToggleButtonAutoRefresh.setSelected(enableAutoRefresh);
        updateAnimatorTooltip();

        // Refresh buttons listener :
        jToggleButtonAutoRefresh.addActionListener(this);
        jSliderImageIndex.addChangeListener(this);
        jSliderImageIndex.setEnabled(false);
    }

    /** 
     * Handle the stateChanged event from the slider.
     * @param ce slider change event
     */
    @Override
    public void stateChanged(final ChangeEvent ce) {
        if (jToggleButtonAutoRefresh.isSelected()) {
            return;
        }
        // Manual navigation:
        if (currentUserModel != null) {
            final int index = jSliderImageIndex.getValue();

            if (_logger.isDebugEnabled()) {
                _logger.debug("slider changed to: {}", index);
            }
            perform(currentUserModel.getFile(), index);
        }
    }

    /**
     * Process any comboBox change event (level) to update Logger's state
     * @param ae action event
     */
    @Override
    public void actionPerformed(final ActionEvent ae) {
        if (ae.getSource() == jToggleButtonAutoRefresh) {
            jSliderImageIndex.setEnabled(!jToggleButtonAutoRefresh.isSelected());
            // enable/disable animator:
            enableAnimator(jToggleButtonAutoRefresh.isSelected());
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jSliderImageIndex = new javax.swing.JSlider();
        jToggleButtonAutoRefresh = new javax.swing.JToggleButton();

        setLayout(new java.awt.GridBagLayout());

        jSliderImageIndex.setValue(0);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        add(jSliderImageIndex, gridBagConstraints);

        jToggleButtonAutoRefresh.setText("Auto");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        add(jToggleButtonAutoRefresh, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JSlider jSliderImageIndex;
    private javax.swing.JToggleButton jToggleButtonAutoRefresh;
    // End of variables declaration//GEN-END:variables

    /**
     * Define the current user model (may register/unregister the listener in user model animator)
     * @param userModel user model
     */
    public void setUserModel(final UserModel userModel) {
        if (userModel != null) {
            // avoid repeating refresh by listeners:
            final int newMax = userModel.isModelDataReady() ? userModel.getModelDataList().size() - 1 : 0;

            if (newMax != jSliderImageIndex.getMaximum()) {
                jSliderImageIndex.setMinimum(0);
                jSliderImageIndex.setMaximum(newMax);
                jSliderImageIndex.setValue(0);
            }
            if (jSliderImageIndex.isEnabled() == jToggleButtonAutoRefresh.isSelected()) {
                jSliderImageIndex.setEnabled(!jToggleButtonAutoRefresh.isSelected());
            }
        }
        this.currentUserModel = userModel;

        enableAnimator(jToggleButtonAutoRefresh.isSelected());
    }

    private void enableAnimator(final boolean enabled) {
        if (enabled && (currentUserModel != null) && currentUserModel.isModelDataReady()) {
            if (!ANIMATOR.isRunning()) {
                // adjust animation speed:
                final int nbImages = currentUserModel.getModelDataList().size();

                final int duration = (nbImages > 100) ? 10000 : 5000;
                final int delay = Math.max(MIN_REFRESH_PERIOD, duration / nbImages);

                if (_logger.isDebugEnabled()) {
                    _logger.debug("enableAnimator: delay = {} ms", delay);
                }
                ANIMATOR.setDelay(delay);
                updateAnimatorTooltip();
            }
            ANIMATOR.register(currentUserModel, this); // start at 0
        } else {
            ANIMATOR.unregister(this);
        }
    }

    private void updateAnimatorTooltip() {
        jToggleButtonAutoRefresh.setToolTipText(
                "automatically cycle through image every " + ANIMATOR.getDelay() + " ms.");
    }

    /**
     * Perform image refresh on the given user model and image index (always on [0; modelDataList.size - 1]
     * @param userModelFile user model file to use
     * @param imageIndex image index to display
     */
    @Override
    public void perform(final String userModelFile, final int imageIndex) {
        if (_logger.isDebugEnabled()) {
            _logger.debug("perform: {} [{}]",
                    hasUserModel() ? currentUserModel.getFile() : null, imageIndex);
        }

        if ((currentUserModel != null) && currentUserModel.getFile().equals(userModelFile)) {
            jSliderImageIndex.setValue(imageIndex);

            // delegate to real listener:
            listener.perform(userModelFile, imageIndex);
        }
    }

    /**
     * Return true if the current user model is defined
     * @return true if the current user model is defined 
     */
    public boolean hasUserModel() {
        return currentUserModel != null;
    }

    @Override
    public String toString() {
        return "AnimatorPanel{listener=" + listener + ", currentUserModel="
                + ((currentUserModel != null) ? currentUserModel.getFile() : "") + '}';
    }

}
