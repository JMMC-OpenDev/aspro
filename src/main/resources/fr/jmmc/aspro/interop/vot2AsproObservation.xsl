<?xml version="1.0"?>
<!--
 *******************************************************************************
 * JMMC project ( http://www.jmmc.fr ) - Copyright (C) CNRS.
 ******************************************************************************

 NAME
 vot2AsproObservation.xsl - Votable into Aspro2 observation setting

 DESCRIPTION
 This stylesheet transform one Votable (any version) into one aspro observation setting.

 TODO: support multiples values for configurations/beams/pops

-->

<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                xmlns:exslt="http://exslt.org/common"
                xmlns:set="http://exslt.org/sets"                            
                extension-element-prefixes="exslt"
                exclude-result-prefixes="">

    <xsl:output omit-xml-declaration="no" indent="yes"/>




    <xsl:variable name="votableWithoutNS">
        <!-- match any VOTABLE version 1.0 to 1.3 (with or without namespace) -->
        <xsl:for-each select="*[local-name()='VOTABLE']">
            <xsl:call-template name="removeNS"/>
        </xsl:for-each>
    </xsl:variable>
    <xsl:variable name="VOTABLE" select="exslt:node-set($votableWithoutNS)/VOTABLE"/>
    <xsl:variable name="TABLES" select="$VOTABLE/RESOURCE/TABLE"/>




    <xsl:template match="/">
        <xsl:apply-templates select="$VOTABLE/RESOURCE" />
    </xsl:template>


    <!-- This template removes the namespace of current node and associated descendants -->
    <xsl:template name="removeNS">
        <xsl:element name="{local-name()}">
            <xsl:copy-of select="@*|text()"/>
            <xsl:for-each select="child::*">
                <xsl:call-template name="removeNS"/>
            </xsl:for-each>
        </xsl:element>
    </xsl:template>

    <!-- This template helps to display debug information -->
    <xsl:template name="log">
        <xsl:param name="msg"/>
        <!--
         Move closing comment tag to enable or disable in a glace the  log         
        
        <xsl:message>
            <xsl:value-of select="concat(' ', $msg)"/>
        </xsl:message>
            
        -->
    </xsl:template>



    <!-- VOTable RESOURCE transform -->
    <xsl:template match="/VOTABLE/RESOURCE">
        <xsl:variable name="RESOURCE"         select="."/>

        <!-- Extract PARAM values (note: topcat/STIL can move PARAMS inside TABLE) -->

        <!-- Main settings -->
        <xsl:variable name="INTERFEROMETER"   select=".//PARAM[@name = 'INTERFEROMETER']/@value"/>
        <xsl:variable name="PERIOD"           select=".//PARAM[@name = 'PERIOD']/@value"/>
        <xsl:variable name="INSTRUMENT"       select=".//PARAM[@name = 'INSTRUMENT']/@value"/>

        <!-- CHARA only -->
        <xsl:variable name="POPS"             select=".//PARAM[@name = 'POPS']/@value"/>
        <xsl:variable name="BEAMS"            select=".//PARAM[@name = 'BEAMS']/@value"/>

        <!-- Configuration(s) -->
        <xsl:variable name="CONFIGURATIONS"   select=".//PARAM[@name = 'CONFIGURATIONS']/@value"/>

        <!-- Constraints -->
        <xsl:variable name="NIGHT"            select=".//PARAM[@name = 'NIGHT']/@value"/>
        <xsl:variable name="DATE"             select=".//PARAM[@name = 'DATE']/@value"/>
        <xsl:variable name="MIN_ELEVATION"    select=".//PARAM[@name = 'MIN_ELEVATION']/@value"/>

        <!-- GUI context -->
        <xsl:variable name="CTX_OPERATION"                  select=".//PARAM[@name = 'OPERATION']/@value"/>
        <xsl:variable name="CTX_INTERFEROMETER_EDITABLE"    select=".//PARAM[@name = 'INTERFEROMETER_EDITABLE']/@value"/>
        <xsl:variable name="CTX_PERIOD_EDITABLE"            select=".//PARAM[@name = 'PERIOD_EDITABLE']/@value"/>
        <xsl:variable name="CTX_INSTRUMENT_EDITABLE"        select=".//PARAM[@name = 'INSTRUMENT_EDITABLE']/@value"/>
        <xsl:variable name="CTX_POPS_EDITABLE"              select=".//PARAM[@name = 'POPS_EDITABLE']/@value"/>
        <xsl:variable name="CTX_CONFIGURATIONS_EDITABLE"    select=".//PARAM[@name = 'CONFIGURATIONS_EDITABLE']/@value"/>
        <xsl:variable name="CTX_NIGHT_EDITABLE"             select=".//PARAM[@name = 'NIGHT_EDITABLE']/@value"/>
        <xsl:variable name="CTX_DATE_EDITABLE"              select=".//PARAM[@name = 'DATE_EDITABLE']/@value"/>
        <xsl:variable name="CTX_MIN_ELEVATION_EDITABLE"     select=".//PARAM[@name = 'MIN_ELEVATION_EDITABLE']/@value"/>
        <xsl:variable name="CTX_TARGETS_EDITABLE"           select=".//PARAM[@name = 'TARGETS_EDITABLE']/@value"/>


        <!-- TODO: handle multiple table ie ensure columns are all coming from the same target table ! -->

        <!-- Locate fields in the votable (generated by mapping2xslt) -->
        <xsl:variable name="NAME_index">
            <xsl:call-template name="getColumnIndex">
                <xsl:with-param name="ucd11">meta.id;meta.main</xsl:with-param>
                <xsl:with-param name="ucd10">META.MAIN</xsl:with-param>
                <xsl:with-param name="utype">obscore:Target.Name</xsl:with-param>
            </xsl:call-template>
        </xsl:variable>

        <!-- handle correct coordinate frame (J2000 / EPOCH = 2000) ie COOSYS -->

        <xsl:variable name="RA_index">
            <xsl:call-template name="getColumnIndex">
                <xsl:with-param name="ucd11">pos.eq.ra</xsl:with-param>
                <xsl:with-param name="ucd10">POS_EQ_RA</xsl:with-param>
                <xsl:with-param name="unit">h:m:s</xsl:with-param>
                <xsl:with-param name="unit_other">hms</xsl:with-param>
            </xsl:call-template>
        </xsl:variable>

        <xsl:variable name="RADeg_index">
            <xsl:choose>
                <xsl:when test="$RA_index = ''">
                    <xsl:call-template name="getColumnIndex">
                        <xsl:with-param name="ucd11">pos.eq.ra</xsl:with-param>
                        <xsl:with-param name="ucd10">POS_EQ_RA</xsl:with-param>
                        <xsl:with-param name="unit">deg</xsl:with-param>
                    </xsl:call-template>
                </xsl:when>
                <xsl:otherwise></xsl:otherwise>
            </xsl:choose>
        </xsl:variable>

        <xsl:variable name="DEC_index">
            <xsl:call-template name="getColumnIndex">
                <xsl:with-param name="ucd11">pos.eq.dec</xsl:with-param>
                <xsl:with-param name="ucd10">POS_EQ_DEC</xsl:with-param>
                <xsl:with-param name="unit">d:m:s</xsl:with-param>
                <xsl:with-param name="unit_other">dms</xsl:with-param>
            </xsl:call-template>
        </xsl:variable>

        <xsl:variable name="DECDeg_index">
            <xsl:choose>
                <xsl:when test="$DEC_index = ''">
                    <xsl:call-template name="getColumnIndex">
                        <xsl:with-param name="ucd11">pos.eq.dec</xsl:with-param>
                        <xsl:with-param name="ucd10">POS_EQ_DEC</xsl:with-param>
                        <xsl:with-param name="unit">deg</xsl:with-param>
                    </xsl:call-template>
                </xsl:when>
                <xsl:otherwise></xsl:otherwise>
            </xsl:choose>
        </xsl:variable>

        <xsl:variable name="RV_index">
            <xsl:call-template name="getColumnIndex">
                <xsl:with-param name="ucd11">spect.dopplerVeloc.opt</xsl:with-param>
                <xsl:with-param name="ucd10">VELOC_HC</xsl:with-param>
                <xsl:with-param name="unit">km.s-1</xsl:with-param>
                <xsl:with-param name="unit_other">km/s</xsl:with-param>
            </xsl:call-template>
        </xsl:variable>

        <xsl:variable name="PMRA_index">
            <xsl:call-template name="getColumnIndex">
                <xsl:with-param name="ucd11">pos.pm;pos.eq.ra</xsl:with-param>
                <xsl:with-param name="ucd10">POS_EQ_PMRA</xsl:with-param>
                <xsl:with-param name="unit">mas.yr-1</xsl:with-param>
                <xsl:with-param name="unit_other">mas/yr</xsl:with-param>
            </xsl:call-template>
        </xsl:variable>
        <xsl:variable name="PMDEC_index">
            <xsl:call-template name="getColumnIndex">
                <xsl:with-param name="ucd11">pos.pm;pos.eq.dec</xsl:with-param>
                <xsl:with-param name="ucd10">POS_EQ_PMDEC</xsl:with-param>
                <xsl:with-param name="unit">mas.yr-1</xsl:with-param>
                <xsl:with-param name="unit_other">mas/yr</xsl:with-param>
            </xsl:call-template>
        </xsl:variable>

        <xsl:variable name="PLX_index">
            <xsl:call-template name="getColumnIndex">
                <xsl:with-param name="ucd11">pos.parallax.trig</xsl:with-param>
                <xsl:with-param name="ucd10">POS_PARLX_TRIG</xsl:with-param>
                <xsl:with-param name="unit">mas</xsl:with-param>
            </xsl:call-template>
        </xsl:variable>
        <xsl:variable name="e_PLX_index">
            <xsl:call-template name="getColumnIndex">
                <xsl:with-param name="ucd11">stat.error;pos.parallax.trig</xsl:with-param>
                <xsl:with-param name="ucd10">POS_PARLX_TRIG_ERROR</xsl:with-param>
                <xsl:with-param name="unit">mas</xsl:with-param>
            </xsl:call-template>
        </xsl:variable>

        <!-- TODO: avoid using column name : parse LINK or anything else -->
        <xsl:variable name="ID_HD_index">
            <xsl:call-template name="getColumnIndex">
                <xsl:with-param name="ucd11">meta.id</xsl:with-param>
                <xsl:with-param name="ucd10">META.ID</xsl:with-param>
                <xsl:with-param name="name">HD</xsl:with-param>
            </xsl:call-template>
        </xsl:variable>

        <xsl:variable name="ID_HIP_index">
            <xsl:call-template name="getColumnIndex">
                <xsl:with-param name="ucd11">meta.id</xsl:with-param>
                <xsl:with-param name="ucd10">META.ID</xsl:with-param>
                <xsl:with-param name="name">HIP</xsl:with-param>
            </xsl:call-template>
        </xsl:variable>

        <xsl:variable name="ID_2MASS_index">
            <xsl:call-template name="getColumnIndex">
                <xsl:with-param name="ucd11">meta.id</xsl:with-param>
                <xsl:with-param name="ucd10">META.ID</xsl:with-param>
                <xsl:with-param name="name">2MASS</xsl:with-param>
            </xsl:call-template>
        </xsl:variable>

        <xsl:variable name="ID_PIVOT_index">
            <xsl:call-template name="getColumnIndex">
                <xsl:with-param name="ucd11">meta.id</xsl:with-param>
                <xsl:with-param name="ucd10">META.ID</xsl:with-param>
                <xsl:with-param name="name">PIVOT</xsl:with-param>
            </xsl:call-template>
        </xsl:variable>

        <xsl:variable name="OTYPES_index">
            <xsl:call-template name="getColumnIndex">
                <xsl:with-param name="ucd11">src.class</xsl:with-param>
                <xsl:with-param name="ucd10"/>
            </xsl:call-template>
        </xsl:variable>

        <xsl:variable name="SP_TYPES_index">
            <xsl:call-template name="getColumnIndex">
                <xsl:with-param name="ucd11">src.spType</xsl:with-param>
                <xsl:with-param name="ucd10">SPECT_TYPE_MK</xsl:with-param>
            </xsl:call-template>
        </xsl:variable>

        <xsl:variable name="FLUX_B_index">
            <xsl:call-template name="getColumnIndex">
                <xsl:with-param name="ucd11">phot.mag;em.opt.B</xsl:with-param>
                <xsl:with-param name="ucd10">PHOT_JHN_B</xsl:with-param>
                <xsl:with-param name="unit">mag</xsl:with-param>
            </xsl:call-template>
        </xsl:variable>
        <xsl:variable name="FLUX_V_index">
            <xsl:call-template name="getColumnIndex">
                <xsl:with-param name="ucd11">phot.mag;em.opt.V</xsl:with-param>
                <xsl:with-param name="ucd10">PHOT_JHN_V</xsl:with-param>
                <xsl:with-param name="unit">mag</xsl:with-param>
            </xsl:call-template>
        </xsl:variable>
        <xsl:variable name="FLUX_G_index">
            <xsl:call-template name="getColumnIndex">
                <xsl:with-param name="ucd11">phot.mag;em.opt.G</xsl:with-param>
                <xsl:with-param name="ucd10">PHOT_JHN_G</xsl:with-param>
                <xsl:with-param name="unit">mag</xsl:with-param>
            </xsl:call-template>
        </xsl:variable>
        <xsl:variable name="FLUX_R_index">
            <xsl:call-template name="getColumnIndex">
                <xsl:with-param name="ucd11">phot.mag;em.opt.R</xsl:with-param>
                <xsl:with-param name="ucd10">PHOT_JHN_R</xsl:with-param>
                <xsl:with-param name="unit">mag</xsl:with-param>
            </xsl:call-template>
        </xsl:variable>
        <xsl:variable name="FLUX_I_index">
            <xsl:call-template name="getColumnIndex">
                <xsl:with-param name="ucd11">phot.mag;em.opt.I</xsl:with-param>
                <xsl:with-param name="ucd10">PHOT_JHN_I</xsl:with-param>
                <xsl:with-param name="unit">mag</xsl:with-param>
            </xsl:call-template>
        </xsl:variable>
        <xsl:variable name="FLUX_J_index">
            <xsl:call-template name="getColumnIndex">
                <xsl:with-param name="ucd11">phot.mag;em.IR.J</xsl:with-param>
                <xsl:with-param name="ucd10">PHOT_JHN_J</xsl:with-param>
                <xsl:with-param name="unit">mag</xsl:with-param>
            </xsl:call-template>
        </xsl:variable>
        <xsl:variable name="FLUX_H_index">
            <xsl:call-template name="getColumnIndex">
                <xsl:with-param name="ucd11">phot.mag;em.IR.H</xsl:with-param>
                <xsl:with-param name="ucd10">PHOT_JHN_H</xsl:with-param>
                <xsl:with-param name="unit">mag</xsl:with-param>
            </xsl:call-template>
        </xsl:variable>
        <xsl:variable name="FLUX_K_index">
            <xsl:call-template name="getColumnIndex">
                <xsl:with-param name="ucd11">phot.mag;em.IR.K</xsl:with-param>
                <xsl:with-param name="ucd10">PHOT_JHN_K</xsl:with-param>
                <xsl:with-param name="unit">mag</xsl:with-param>
            </xsl:call-template>
        </xsl:variable>
        <xsl:variable name="FLUX_L_index">
            <xsl:call-template name="getColumnIndex">
                <xsl:with-param name="ucd11">phot.mag;em.IR.3-4um</xsl:with-param>
                <xsl:with-param name="ucd10">PHOT_JHN_L</xsl:with-param>
                <xsl:with-param name="unit">mag</xsl:with-param>
            </xsl:call-template>
        </xsl:variable>
        <xsl:variable name="FLUX_M_index">
            <xsl:call-template name="getColumnIndex">
                <xsl:with-param name="ucd11">phot.mag;em.IR.4-8um</xsl:with-param>
                <xsl:with-param name="ucd10">PHOT_JHN_M</xsl:with-param>
                <xsl:with-param name="unit">mag</xsl:with-param>
            </xsl:call-template>
        </xsl:variable>
        <xsl:variable name="FLUX_N_index">
            <xsl:call-template name="getColumnIndex">
                <xsl:with-param name="ucd11">phot.mag;em.IR.8-15um</xsl:with-param>
                <xsl:with-param name="ucd10">PHOT_JHN_N</xsl:with-param>
                <xsl:with-param name="unit">mag</xsl:with-param>
            </xsl:call-template>
        </xsl:variable>
        
        <xsl:variable name="TARGET_MODEL_index">
            <xsl:call-template name="getColumnIndex">
                <!-- synced with a2p2.jmmc.Models.SAMP_UCD_MODEL-->
                <xsl:with-param name="ucd11">meta.code.class;meta.modelled</xsl:with-param>                
            </xsl:call-template>
        </xsl:variable>

        <!-- target / calibrator information (separate table) -->
        <xsl:variable name="SCI_TARGET_NAME_index">
            <xsl:call-template name="getColumnIndex">
                <xsl:with-param name="ucd11">meta.id</xsl:with-param>
                <xsl:with-param name="ucd10">META.ID</xsl:with-param>
                <xsl:with-param name="name">SCIENCE_TARGET_NAME</xsl:with-param>
            </xsl:call-template>
        </xsl:variable>

        <xsl:variable name="CAL_TARGET_NAME_index">
            <xsl:call-template name="getColumnIndex">
                <xsl:with-param name="ucd11">meta.id</xsl:with-param>
                <xsl:with-param name="ucd10">META.ID</xsl:with-param>
                <xsl:with-param name="name">CALIBRATOR_NAME</xsl:with-param>
            </xsl:call-template>
        </xsl:variable>

        <!-- TARGET_USER_INFORMATION -->

        <xsl:variable name="DESCRIPTION_index">
            <xsl:call-template name="getColumnIndex">
                <xsl:with-param name="ucd11">meta.note</xsl:with-param>
            </xsl:call-template>
        </xsl:variable>
        <!-- group information (same table) -->
        <!-- TODO add support for multiple fields -->
        <xsl:variable name="GROUP_index">
            <xsl:call-template name="getColumnIndex">
                <xsl:with-param name="ucd11">meta.code.class;meta.id</xsl:with-param>
            </xsl:call-template>
        </xsl:variable>

        <xsl:variable name="TARGET_EXTRA_INFOS_indexes">
            <xsl:call-template name="getGroupIndexes">
                <xsl:with-param name="ucd11">meta.code.class</xsl:with-param>
            </xsl:call-template>
        </xsl:variable>




        <!-- TODO: Handle also STC meta data as COOSYS is deprecated in VOTABLE 1.2 -->

        <!-- check coordinate system to have epoch = J2000 / equinox = 2000 -->
        <xsl:variable name="EQUINOX">
            <xsl:choose>
                <!-- only one COOSYS element -->
                <xsl:when test="count(../COOSYS) = 1">
                    <xsl:call-template name="getEquinoxFromCooSys">
                        <xsl:with-param name="COOSYS" select="../COOSYS[1]"/>
                    </xsl:call-template>
                </xsl:when>
                <!-- test reference from RA/DEC fields to ref coosys -->
                <xsl:when test="($RA_index != '' or $RADeg_index != '') and ($DEC_index != '' or $DECDeg_index != '')">
                    <xsl:variable name="RA_ref">
                        <xsl:choose>
                            <xsl:when test="$RA_index != ''">
                                <xsl:value-of select="$TABLES/FIELD[position() = $RA_index]/@ref"/>
                            </xsl:when>
                            <xsl:when test="$RADeg_index != ''">
                                <xsl:value-of select="$TABLES/FIELD[position() = $RADeg_index]/@ref"/>
                            </xsl:when>
                            <xsl:otherwise></xsl:otherwise>
                        </xsl:choose>
                    </xsl:variable>
                    <xsl:variable name="DEC_ref">
                        <xsl:choose>
                            <xsl:when test="$DEC_index != ''">
                                <xsl:value-of select="$TABLES/FIELD[position() = $DEC_index]/@ref"/>
                            </xsl:when>
                            <xsl:when test="$DECDeg_index != ''">
                                <xsl:value-of select="$TABLES/FIELD[position() = $DECDeg_index]/@ref"/>
                            </xsl:when>
                            <xsl:otherwise></xsl:otherwise>
                        </xsl:choose>
                    </xsl:variable>

                    <xsl:variable name="RA_EQUINOX">
                        <xsl:call-template name="getEquinoxFromCooSys">
                            <xsl:with-param name="COOSYS" select="../COOSYS[@ID = $RA_ref]"/>
                        </xsl:call-template>
                    </xsl:variable>

                    <xsl:variable name="DEC_EQUINOX">
                        <xsl:call-template name="getEquinoxFromCooSys">
                            <xsl:with-param name="COOSYS" select="../COOSYS[@ID = $DEC_ref]"/>
                        </xsl:call-template>
                    </xsl:variable>

                    <xsl:choose>
                        <xsl:when test="$RA_EQUINOX != '' and $RA_EQUINOX = $DEC_EQUINOX">
                            <xsl:value-of select="$RA_EQUINOX"/>
                        </xsl:when>
                        <xsl:when test="$RA_ref != '' and $RA_ref = $DEC_ref and $RA_ref = 'J2000'">2000</xsl:when>
                        <xsl:otherwise></xsl:otherwise>
                    </xsl:choose>

                </xsl:when>
                <!-- undefined -->
                <xsl:otherwise></xsl:otherwise>
            </xsl:choose>
        </xsl:variable>


        <!-- starting output document -->
        <a:observationSetting
            xmlns:a="http://www.jmmc.fr/aspro-oi/0.1"
            xmlns:tm="http://www.jmmc.fr/jmcs/models/0.1"
            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            xsi:schemaLocation="http://www.jmmc.fr/aspro-oi/0.1 AsproOIModel.xsd http://www.jmmc.fr/jmcs/models/0.1 targetModel.xsd">

            <xsl:comment>Generated by xslt script from votable</xsl:comment>

            <schemaVersion>2018.04</schemaVersion>
            <targetVersion>0.0</targetVersion>
            <name>default</name>

            <xsl:if test="$NIGHT != '' or $DATE != ''">
                <when>
                    <date>
                        <xsl:value-of select="$DATE"/>
                    </date>
                    <nightRestriction>
                        <xsl:choose>
                            <xsl:when test="$NIGHT = 'false' or $NIGHT = 'F'">false</xsl:when>
                            <xsl:otherwise>true</xsl:otherwise>
                        </xsl:choose>
                    </nightRestriction>
                    <atmosphereQuality>Average</atmosphereQuality>
                </when>
            </xsl:if>

            <xsl:if test="$PERIOD != '' or $INTERFEROMETER != ''">
                <interferometerConfiguration>
                    <xsl:choose>
                        <xsl:when test="$PERIOD != ''">
                            <name>
                                <xsl:value-of select="$PERIOD"/>
                            </name>
                        </xsl:when>
                        <xsl:otherwise>
                            <name>
                                <xsl:value-of select="$INTERFEROMETER"/>
                            </name>
                        </xsl:otherwise>
                    </xsl:choose>

                    <minElevation>
                        <xsl:value-of select="$MIN_ELEVATION"/>
                    </minElevation>

                </interferometerConfiguration>
            </xsl:if>

            <xsl:if test="$INSTRUMENT != '' and $CONFIGURATIONS != ''">
                <instrumentConfiguration>
                    <name>
                        <xsl:value-of select="$INSTRUMENT"/>
                    </name>

                    <stations>
                        <xsl:value-of select="$CONFIGURATIONS"/>
                    </stations>

                    <xsl:if test="$POPS != ''">
                        <pops>
                            <xsl:value-of select="$POPS"/>
                        </pops>
                    </xsl:if>

                    <!-- optional parameters -->
                    <!--
                              <instrumentMode>standard</instrumentMode>
                              <samplingPeriod>40.0</samplingPeriod>
                              <acquisitionTime>300.0</acquisitionTime>
                    -->
                </instrumentConfiguration>
            </xsl:if>

            <!-- skip data if no columns matching NAME/RA/DEC -->
            <xsl:if test="$NAME_index != '' and ($RA_index != '' or $RADeg_index != '') and ($DEC_index != '' or $DECDeg_index != '') and $EQUINOX != ''">

                <xsl:variable name="TARGET_EXTRA_INFOS_INDEX_NODES" select="exslt:node-set($TARGET_EXTRA_INFOS_indexes)/*"/>
                <xsl:call-template name="log">
                    <xsl:with-param name="msg">Building target elements</xsl:with-param>
                </xsl:call-template>
                <!-- Build one target element per votable row -->
                <xsl:for-each select="./TABLE/DATA/TABLEDATA/TR">

                    <xsl:variable name="RA">
                        <xsl:choose>
                            <xsl:when test="$RA_index != '' and ./TD[position()=$RA_index]/text()">
                                <xsl:value-of select="translate(./TD[position()=$RA_index]/text(), ' ', ':')"/>
                            </xsl:when>
                            <xsl:when test="$RADeg_index != '' and ./TD[position()=$RADeg_index]/text()">
                                <!-- convert degrees to decimal hours -->
                                <xsl:value-of select="format-number(./TD[position()=$RADeg_index]/text() div 15.0, '#0.000###')"/>
                            </xsl:when>
                            <xsl:otherwise></xsl:otherwise>
                        </xsl:choose>
                    </xsl:variable>
                    <xsl:variable name="DEC">
                        <xsl:choose>
                            <xsl:when test="$DEC_index != '' and ./TD[position()=$DEC_index]/text()">
                                <xsl:value-of select="translate(./TD[position()=$DEC_index]/text(), ' ', ':')"/>
                            </xsl:when>
                            <xsl:when test="$DECDeg_index != '' and ./TD[position()=$DECDeg_index]/text()">
                                <xsl:value-of select="format-number(./TD[position()=$DECDeg_index]/text(), '#0.000###')"/>
                            </xsl:when>
                            <xsl:otherwise></xsl:otherwise>
                        </xsl:choose>
                    </xsl:variable>

                    <xsl:variable name="NAME" select="./TD[$NAME_index != '' and position()=$NAME_index]/text()"/>

                    <xsl:if test="$NAME != '' and $RA != '' and $DEC != ''">

                        <xsl:variable name="TARGET_ID">
                            <xsl:call-template name="getTargetId">
                                <xsl:with-param name="name" select="$NAME" />
                            </xsl:call-template>
                        </xsl:variable>

                        <xsl:variable name="ID_HD">
                            <xsl:if test="$ID_HD_index != '' and ./TD[position()=$ID_HD_index]/text()">
                                <xsl:value-of select="concat('HD ',./TD[position()=$ID_HD_index]/text())"/>
                            </xsl:if>
                        </xsl:variable>
                        <xsl:variable name="ID_HIP">
                            <xsl:if test="$ID_HIP_index != '' and ./TD[position()=$ID_HIP_index]/text()">
                                <xsl:value-of select="concat('HIP ',./TD[position()=$ID_HIP_index]/text())"/>
                            </xsl:if>
                        </xsl:variable>
                        <xsl:variable name="ID_2MASS">
                            <xsl:if test="$ID_2MASS_index != '' and ./TD[position()=$ID_2MASS_index]/text()">
                                <xsl:value-of select="concat('2MASS J',./TD[position()=$ID_2MASS_index]/text())"/>
                            </xsl:if>
                        </xsl:variable>
                        <xsl:variable name="ID_PIVOT">
                            <xsl:if test="$ID_PIVOT_index != '' and ./TD[position()=$ID_PIVOT_index]/text()">
                                <xsl:value-of select="concat('PIVOT ',./TD[position()=$ID_PIVOT_index]/text())"/>
                            </xsl:if>
                        </xsl:variable>

                        <xsl:variable name="RV"       select="./TD[$RV_index != '' and position()=$RV_index]/text()"/>
                        <xsl:variable name="PMRA"     select="./TD[$PMRA_index != '' and position()=$PMRA_index]/text()"/>
                        <xsl:variable name="PMDEC"    select="./TD[$PMDEC_index != '' and position()=$PMDEC_index]/text()"/>
                        <xsl:variable name="PLX"      select="./TD[$PLX_index != '' and position()=$PLX_index]/text()"/>
                        <xsl:variable name="e_PLX"    select="./TD[$e_PLX_index != '' and position()=$e_PLX_index]/text()"/>
                        <xsl:variable name="OTYPES"   select="./TD[$OTYPES_index != '' and position()=$OTYPES_index]/text()"/>
                        <xsl:variable name="SP_TYPES" select="./TD[$SP_TYPES_index != '' and position()=$SP_TYPES_index]/text()"/>
                        <xsl:variable name="FLUX_B"   select="./TD[$FLUX_B_index != '' and position()=$FLUX_B_index]/text()"/>
                        <xsl:variable name="FLUX_V"   select="./TD[$FLUX_V_index != '' and position()=$FLUX_V_index]/text()"/>
                        <xsl:variable name="FLUX_G"   select="./TD[$FLUX_G_index != '' and position()=$FLUX_G_index]/text()"/>
                        <xsl:variable name="FLUX_R"   select="./TD[$FLUX_R_index != '' and position()=$FLUX_R_index]/text()"/>
                        <xsl:variable name="FLUX_I"   select="./TD[$FLUX_I_index != '' and position()=$FLUX_I_index]/text()"/>
                        <xsl:variable name="FLUX_J"   select="./TD[$FLUX_J_index != '' and position()=$FLUX_J_index]/text()"/>
                        <xsl:variable name="FLUX_H"   select="./TD[$FLUX_H_index != '' and position()=$FLUX_H_index]/text()"/>
                        <xsl:variable name="FLUX_K"   select="./TD[$FLUX_K_index != '' and position()=$FLUX_K_index]/text()"/>
                        <xsl:variable name="FLUX_L"   select="./TD[$FLUX_L_index != '' and position()=$FLUX_L_index]/text()"/>
                        <xsl:variable name="FLUX_M"   select="./TD[$FLUX_M_index != '' and position()=$FLUX_M_index]/text()"/>
                        <xsl:variable name="FLUX_N"   select="./TD[$FLUX_N_index != '' and position()=$FLUX_N_index]/text()"/>
                        <xsl:variable name="TARGET_MODEL"   select="./TD[$TARGET_MODEL_index != '' and position()=$TARGET_MODEL_index]/text()"/>

                        <target id="{$TARGET_ID}">

                            <!-- identifier -->
                            <name>
                                <xsl:value-of select="$NAME"/>
                            </name>

                            <!-- position -->
                            <RA>
                                <xsl:value-of select="$RA"/>
                            </RA>
                            <DEC>
                                <xsl:value-of select="$DEC"/>
                            </DEC>
                            <EQUINOX>
                                <xsl:value-of select="$EQUINOX"/>
                            </EQUINOX>

                            <!-- radial velocity -->
                            <xsl:if test="$RV != ''">
                                <SYSVEL>
                                    <xsl:value-of select="$RV"/>
                                </SYSVEL>
                            </xsl:if>

                            <!-- proper motion -->
                            <xsl:if test="$PMRA != ''">
                                <PMRA>
                                    <xsl:value-of select="$PMRA"/>
                                </PMRA>
                            </xsl:if>
                            <xsl:if test="$PMDEC != ''">
                                <PMDEC>
                                    <xsl:value-of select="$PMDEC"/>
                                </PMDEC>
                            </xsl:if>

                            <!-- parallax -->
                            <xsl:if test="$PLX != ''">
                                <PARALLAX>
                                    <xsl:value-of select="$PLX"/>
                                </PARALLAX>
                            </xsl:if>
                            <xsl:if test="$e_PLX != ''">
                                <PARA_ERR>
                                    <xsl:value-of select="$e_PLX"/>
                                </PARA_ERR>
                            </xsl:if>

                            <!-- identifiers (HD, HIP, 2MASS, PIVOT) -->
                            <IDS>
                                <xsl:if test="$ID_HD != ''">
                                    <xsl:value-of select="$ID_HD"/>,</xsl:if>
                                <xsl:if test="$ID_HIP != ''">
                                    <xsl:value-of select="$ID_HIP"/>,</xsl:if>
                                <xsl:if test="$ID_2MASS != ''">
                                    <xsl:value-of select="$ID_2MASS"/>,</xsl:if>
                                <xsl:if test="$ID_PIVOT != ''">
                                    <xsl:value-of select="$ID_PIVOT"/>,</xsl:if>
                            </IDS>

                            <!-- object types -->
                            <xsl:if test="$OTYPES != ''">
                                <OBJTYP>
                                    <xsl:value-of select="$OTYPES"/>
                                </OBJTYP>
                            </xsl:if>

                            <!-- spectral types -->
                            <xsl:if test="$SP_TYPES != ''">
                                <SPECTYP>
                                    <xsl:value-of select="$SP_TYPES"/>
                                </SPECTYP>
                            </xsl:if>

                            <!-- magnitudes -->
                            <xsl:if test="$FLUX_B != ''">
                                <FLUX_B>
                                    <xsl:value-of select="$FLUX_B"/>
                                </FLUX_B>
                            </xsl:if>
                            <xsl:if test="$FLUX_V != ''">
                                <FLUX_V>
                                    <xsl:value-of select="$FLUX_V"/>
                                </FLUX_V>
                            </xsl:if>
                            <xsl:if test="$FLUX_G != ''">
                                <FLUX_G>
                                    <xsl:value-of select="$FLUX_G"/>
                                </FLUX_G>
                            </xsl:if>
                            <xsl:if test="$FLUX_R != ''">
                                <FLUX_R>
                                    <xsl:value-of select="$FLUX_R"/>
                                </FLUX_R>
                            </xsl:if>
                            <xsl:if test="$FLUX_I != ''">
                                <FLUX_I>
                                    <xsl:value-of select="$FLUX_I"/>
                                </FLUX_I>
                            </xsl:if>
                            <xsl:if test="$FLUX_J != ''">
                                <FLUX_J>
                                    <xsl:value-of select="$FLUX_J"/>
                                </FLUX_J>
                            </xsl:if>
                            <xsl:if test="$FLUX_H != ''">
                                <FLUX_H>
                                    <xsl:value-of select="$FLUX_H"/>
                                </FLUX_H>
                            </xsl:if>
                            <xsl:if test="$FLUX_K != ''">
                                <FLUX_K>
                                    <xsl:value-of select="$FLUX_K"/>
                                </FLUX_K>
                            </xsl:if>
                            <xsl:if test="$FLUX_L != ''">
                                <FLUX_L>
                                    <xsl:value-of select="$FLUX_L"/>
                                </FLUX_L>
                            </xsl:if>
                            <xsl:if test="$FLUX_M != ''">
                                <FLUX_M>
                                    <xsl:value-of select="$FLUX_M"/>
                                </FLUX_M>
                            </xsl:if>
                            <xsl:if test="$FLUX_N != ''">
                                <FLUX_N>
                                    <xsl:value-of select="$FLUX_N"/>
                                </FLUX_N>
                            </xsl:if>

                            
                            <useAnalyticalModel>true</useAnalyticalModel>
                            <!-- a model may be given in a CDATA section or escape xml chars &gt; ...
                            no check is performed at this stage (we may forward bad things) -->                                                                                    
                            <xsl:if test="$TARGET_MODEL != ''">
                                <xsl:value-of select="$TARGET_MODEL" disable-output-escaping="yes"/>
                            </xsl:if>
                            
                            <calibratorInfos>
                                <xsl:variable name="TARGET" select="."/>

                                <xsl:for-each select="$TARGET_EXTRA_INFOS_INDEX_NODES">
                                    <xsl:variable name="TARGET_EXTRA_INFOS_POS" select="."/>
                                    <xsl:variable name="FIELD_VALUE" select="$TARGET/TD[position()=$TARGET_EXTRA_INFOS_POS]/text()"/>

                                    <xsl:if test="$FIELD_VALUE !=''">
                                        <xsl:variable name="FIELD_NODE" select="$TABLES/FIELD[position()=$TARGET_EXTRA_INFOS_POS]"/>
                                        <field>
                                            <xsl:attribute name="xsi:type">
                                                <xsl:choose>
                                                    <xsl:when test="$FIELD_NODE/@datatype = 'double' or $FIELD_NODE/@datatype = 'float'">a:NumberValue</xsl:when>
                                                    <xsl:when test="$FIELD_NODE/@datatype = 'boolean'">a:BooleanValue</xsl:when>
                                                    <xsl:otherwise>a:StringValue</xsl:otherwise>
                                                </xsl:choose>
                                            </xsl:attribute>
                                            <xsl:attribute name="name">
                                                <xsl:value-of select="$FIELD_NODE/@name" />
                                            </xsl:attribute>
                                            <xsl:attribute name="value">
                                                <xsl:value-of select="$FIELD_VALUE" />
                                            </xsl:attribute>
                                            <xsl:if test="$FIELD_NODE/@unit">
                                                <xsl:attribute name="unit">
                                                    <xsl:value-of select="$FIELD_NODE/@unit" />
                                                </xsl:attribute>
                                            </xsl:if>
                                        </field>
                                    </xsl:if>
                                </xsl:for-each>

                            </calibratorInfos>

                        </target>
                    </xsl:if>

                </xsl:for-each>
            </xsl:if>

            <!-- add calibrator info if present and create groups if any-->
            <xsl:if test="($SCI_TARGET_NAME_index != '' and $CAL_TARGET_NAME_index != '') or ( ($DESCRIPTION_index != '' or $GROUP_index != '') and $NAME_index)">
                <xsl:choose>
                    <!-- target defined -->
                    <xsl:when test="$NAME_index != ''">
                        <!--
                              <xsl:message>SCI_TARGET_NAME_index: <xsl:value-of select="$SCI_TARGET_NAME_index"/></xsl:message>
                              <xsl:message>CAL_TARGET_NAME_index: <xsl:value-of select="$CAL_TARGET_NAME_index"/></xsl:message>
                        -->
                        <xsl:variable name="TARGET_TABLE" select="./TABLE[1]"/>
                        <xsl:variable name="CAL_TABLE" select="./TABLE[2]"/>

                        <targetUserInfos>
                            <xsl:call-template name="log">
                                <xsl:with-param name="msg">Building targetUserInfos</xsl:with-param>
                            </xsl:call-template>
                            <xsl:if test="$GROUP_index != ''">
                                
                                <!-- groupDefs -->
                                <xsl:for-each select="./TABLE/DATA/TABLEDATA/TR/TD[position()=$GROUP_index and not(../preceding-sibling::TR/TD[position()=$GROUP_index] = .) ]">
                                    <xsl:variable name="GROUP_REF" select="."/>
                                    <xsl:variable name="GROUP_POS" select="position()"/>
                                    <xsl:variable name="GROUP_ID">
                                        <xsl:call-template name="getTargetId">
                                            <xsl:with-param name="name" select="$GROUP_REF" />
                                        </xsl:call-template>
                                    </xsl:variable>
                                    
                                    <group id="{$GROUP_ID}">
                                        <name>
                                            <xsl:value-of select="$TABLES/FIELD[position()=$GROUP_index]/@name"/> = <xsl:value-of select="$GROUP_REF"/>
                                        </name>
                                        <!-- TODO use other values than USER for futur behaviour mapping -->
                                        <category>[USER]</category>
                                        <color>
                                            <xsl:call-template name="getColor">
                                                <xsl:with-param name="idx" select="$GROUP_POS" />
                                            </xsl:call-template>
                                        </color>
                                    </group>
                                    <xsl:call-template name="log">
                                        <xsl:with-param name="msg">Building targetUserInfos... group def of <xsl:value-of select="$GROUP_REF"/></xsl:with-param>
                                    </xsl:call-template>
                                </xsl:for-each>

                                <!-- groupMembers -->
                                <xsl:for-each select="./TABLE/DATA/TABLEDATA/TR/TD[position()=$GROUP_index and not(../preceding-sibling::TR/TD[position()=$GROUP_index] = .) ]">
                                    <xsl:variable name="GROUP_REF" select="."/>
                                    <xsl:variable name="GROUP_ID">
                                        <xsl:call-template name="getTargetId">
                                            <xsl:with-param name="name" select="$GROUP_REF" />
                                        </xsl:call-template>
                                    </xsl:variable>

                                    <xsl:variable name="TARGET_IDS">
                                        <xsl:for-each select="$TABLES/DATA/TABLEDATA/TR[TD[position()=$GROUP_index and text()=$GROUP_REF]]">
                                            <xsl:variable name="TARGET_ID">
                                                <xsl:call-template name="getTargetId">
                                                    <xsl:with-param name="name" select="./TD[position()=$NAME_index]" />
                                                </xsl:call-template>
                                            </xsl:variable>
                                            <xsl:value-of select="$TARGET_ID"/>
                                            <xsl:value-of select="' '"/>
                                        </xsl:for-each>
                                    </xsl:variable>

                                    <groupMembers>
                                        <groupRef>
                                            <xsl:value-of select="$GROUP_ID"/>
                                        </groupRef>
                                        <targets>
                                            <xsl:value-of select="$TARGET_IDS"/>
                                        </targets>
                                    </groupMembers>
                                    <xsl:call-template name="log">
                                        <xsl:with-param name="msg">Building targetUserInfos... group members of <xsl:value-of select="$GROUP_REF"/></xsl:with-param>
                                    </xsl:call-template>

                                </xsl:for-each>
                                <xsl:call-template name="log">
                                    <xsl:with-param name="msg">Building targetUserInfos... groups done</xsl:with-param>
                                </xsl:call-template>
                            </xsl:if>
                            <!-- first attempt to convey note as a target decription
                            next implementation should merge content with other targetInfo children -->
                            <xsl:for-each select="$TABLES/DATA/TABLEDATA/TR[TD[position()=$DESCRIPTION_index and text()]]">
                                <targetInfo>
                                    <xsl:variable name="TARGET_ID">
                                        <xsl:call-template name="getTargetId">
                                            <xsl:with-param name="name" select="./TD[position()=$NAME_index]" />
                                        </xsl:call-template>
                                    </xsl:variable>
                                    <targetRef>
                                        <xsl:value-of select="$TARGET_ID"/>
                                    </targetRef>
                                    <description>
                                        <xsl:copy-of select="./TD[position()=$DESCRIPTION_index]/text()"/>
                                    </description>
                                </targetInfo>
                                <xsl:call-template name="log">
                                    <xsl:with-param name="msg">Building targetUserInfos... targetInfo(descriptions) done</xsl:with-param>
                                </xsl:call-template>
                            </xsl:for-each>

                            <!-- list of all calibrators -->
                            <calibrators>
                                <xsl:for-each select="$CAL_TABLE/DATA/TABLEDATA/TR">
                                    <xsl:variable name="CAL_NAME" select="./TD[position()=$CAL_TARGET_NAME_index]"/>
                                    <xsl:call-template name="log">
                                        <xsl:with-param name="msg">CAL_NAME: <xsl:value-of select="$CAL_NAME"/></xsl:with-param>
                                    </xsl:call-template>  
                                    <xsl:if test="$TARGET_TABLE/DATA/TABLEDATA/TR/TD[position()=$NAME_index] = $CAL_NAME">
                                        <xsl:call-template name="log">
                                            <xsl:with-param name="msg">CAL_NAME exists in target table</xsl:with-param>
                                        </xsl:call-template>                                    
                                        <!-- DO UNIQUE -->
                                        <xsl:if test="$CAL_NAME != '' and not(./preceding-sibling::TR/TD[position()=$CAL_TARGET_NAME_index]=$CAL_NAME)">
                                            <xsl:variable name="CAL_ID">
                                                <xsl:call-template name="getTargetId">
                                                    <xsl:with-param name="name" select="$CAL_NAME" />
                                                </xsl:call-template>
                                            </xsl:variable>

                                            <xsl:value-of select="$CAL_ID"/>
                                            <xsl:value-of select="' '"/>
                                        </xsl:if>
                                    </xsl:if>
                                </xsl:for-each>
                                <xsl:call-template name="log">
                                    <xsl:with-param name="msg">Building targetUserInfos... calibrators done</xsl:with-param>
                                </xsl:call-template>
                            </calibrators>

                            <!-- list of calibrators per science target -->
                            <xsl:for-each select="$CAL_TABLE/DATA/TABLEDATA/TR ">
                                <xsl:variable name="SCI_NAME" select="./TD[position()=$SCI_TARGET_NAME_index]"/>
                                <!--
                                        <xsl:message>SCI_NAME: <xsl:value-of select="$SCI_NAME"/></xsl:message>
                                -->
                                <xsl:if test="$TARGET_TABLE/DATA/TABLEDATA/TR/TD[position()=$NAME_index] = $SCI_NAME">
                                    <!--
                                              <xsl:message>SCI_NAME exists in target table</xsl:message>
                                    -->
                                    <xsl:if test="$SCI_NAME != '' and not(./preceding-sibling::TR/TD[position()=$SCI_TARGET_NAME_index]=$SCI_NAME)">
                                        <!--
                                                    <xsl:message>SCI_NAME: <xsl:value-of select="$SCI_NAME"/></xsl:message>
                                        -->
                                        <xsl:variable name="SCI_ID">
                                            <xsl:call-template name="getTargetId">
                                                <xsl:with-param name="name" select="$SCI_NAME" />
                                            </xsl:call-template>
                                        </xsl:variable>

                                        <!-- DO UNIQUE -->
                                        <targetInfo>
                                            <targetRef>
                                                <xsl:value-of select="$SCI_ID"/>
                                            </targetRef>
                                            <xsl:call-template name="log">
                                                <xsl:with-param name="msg">Building targetUserInfos... targetInfo <xsl:value-of select="$SCI_ID"/></xsl:with-param>
                                            </xsl:call-template>                                        
                                            <calibrators>
                                                <xsl:for-each select="$CAL_TABLE/DATA/TABLEDATA/TR">

                                                    <xsl:variable name="CAL_NAME" select="./TD[position()=$CAL_TARGET_NAME_index]"/>
                                                    <xsl:call-template name="log">
                                                        <xsl:with-param name="msg">CAL_NAME: <xsl:value-of select="$CAL_NAME"/></xsl:with-param>
                                                    </xsl:call-template>
                                                    
                                                <!-- do not check if calibrator is present in target table since 25+ is probably generated and should be self consistent by construction : huge speedup-->
                                                    <xsl:if test="( count($CAL_TABLE/DATA/TABLEDATA/TR ) > 25) or $TARGET_TABLE/DATA/TABLEDATA/TR/TD[position()=$NAME_index] = $CAL_NAME">
                                                    <xsl:call-template name="log">
                                                        <xsl:with-param name="msg">CAL_NAME exists in target table or test skipped for huge number of calibrators</xsl:with-param>
                                                    </xsl:call-template>
                                                    <xsl:if test="$CAL_NAME != '' and ./TD[position()=$SCI_TARGET_NAME_index] = $SCI_NAME">
                                                        <xsl:variable name="CAL_ID">
                                                            <xsl:call-template name="getTargetId">
                                                                <xsl:with-param name="name" select="$CAL_NAME" />
                                                            </xsl:call-template>
                                                        </xsl:variable>

                                                        <xsl:value-of select="$CAL_ID"/>
                                                        <xsl:value-of select="' '"/>
                                                    </xsl:if>
                                                    </xsl:if>
                                                </xsl:for-each>
                                            </calibrators>
                                        </targetInfo>
                                    </xsl:if>
                                </xsl:if>
                            </xsl:for-each>
                            <xsl:call-template name="log">
                                <xsl:with-param name="msg">Building targetUserInfos... targetInfo(cal) done</xsl:with-param>
                            </xsl:call-template>
                        </targetUserInfos>
                    </xsl:when>
                    <xsl:otherwise>

                        <!--
                              <xsl:message>SCI_TARGET_NAME_index: <xsl:value-of select="$SCI_TARGET_NAME_index"/></xsl:message>
                              <xsl:message>CAL_TARGET_NAME_index: <xsl:value-of select="$CAL_TARGET_NAME_index"/></xsl:message>
                        -->
                        <xsl:variable name="CAL_TABLE" select="./TABLE[1]"/>

                        <!-- generate the list of target (id only) from all science and calibrator targets -->
                        <xsl:for-each select="$CAL_TABLE/DATA/TABLEDATA/TR">
                            <xsl:variable name="SCI_NAME" select="./TD[position()=$SCI_TARGET_NAME_index]"/>

                            <!-- DO UNIQUE -->
                            <xsl:if test="$SCI_NAME != '' and not(./preceding-sibling::TR/TD[position()=$SCI_TARGET_NAME_index]=$SCI_NAME)">
                                <xsl:variable name="SCI_ID">
                                    <xsl:call-template name="getTargetId">
                                        <xsl:with-param name="name" select="$SCI_NAME" />
                                    </xsl:call-template>
                                </xsl:variable>

                                <target id="{$SCI_ID}">
                                    <name>
                                        <xsl:value-of select="$SCI_NAME"/>
                                    </name>
                                    <!-- null position -->
                                    <RA>NaN</RA>
                                    <DEC>NaN</DEC>
                                    <EQUINOX>NaN</EQUINOX>
                                </target>
                            </xsl:if>

                            <xsl:variable name="CAL_NAME" select="./TD[position()=$CAL_TARGET_NAME_index]"/>
                            <!--
                                  <xsl:message>CAL_NAME: <xsl:value-of select="$CAL_NAME"/></xsl:message>
                            -->
                            <!-- DO UNIQUE -->
                            <xsl:if test="$CAL_NAME != '' and not(./preceding-sibling::TR/TD[position()=$CAL_TARGET_NAME_index]=$CAL_NAME)">
                                <xsl:variable name="CAL_ID">
                                    <xsl:call-template name="getTargetId">
                                        <xsl:with-param name="name" select="$CAL_NAME" />
                                    </xsl:call-template>
                                </xsl:variable>

                                <target id="{$CAL_ID}">
                                    <name>
                                        <xsl:value-of select="$CAL_NAME"/>
                                    </name>
                                    <!-- null position -->
                                    <RA>NaN</RA>
                                    <DEC>NaN</DEC>
                                    <EQUINOX>NaN</EQUINOX>
                                </target>
                            </xsl:if>
                        </xsl:for-each>

                        <targetUserInfos>

                            <!-- list of all calibrators -->
                            <calibrators>
                                <xsl:for-each select="$CAL_TABLE/DATA/TABLEDATA/TR">
                                    <xsl:variable name="CAL_NAME" select="./TD[position()=$CAL_TARGET_NAME_index]"/>
                                    <!--
                                          <xsl:message>CAL_NAME: <xsl:value-of select="$CAL_NAME"/></xsl:message>
                                    -->
                                    <!-- DO UNIQUE -->
                                    <xsl:if test="$CAL_NAME != '' and not(./preceding-sibling::TR/TD[position()=$CAL_TARGET_NAME_index]=$CAL_NAME)">
                                        <xsl:variable name="CAL_ID">
                                            <xsl:call-template name="getTargetId">
                                                <xsl:with-param name="name" select="$CAL_NAME" />
                                            </xsl:call-template>
                                        </xsl:variable>

                                        <xsl:value-of select="$CAL_ID"/>
                                        <xsl:value-of select="' '"/>
                                    </xsl:if>
                                </xsl:for-each>
                            </calibrators>

                            <!-- list of calibrators per science target -->
                            <xsl:for-each select="$CAL_TABLE/DATA/TABLEDATA/TR">
                                <xsl:variable name="SCI_NAME" select="./TD[position()=$SCI_TARGET_NAME_index]"/>
                                <!--
                                        <xsl:message>SCI_NAME: <xsl:value-of select="$SCI_NAME"/></xsl:message>
                                -->
                                <xsl:if test="$SCI_NAME != '' and not(./preceding-sibling::TR/TD[position()=$SCI_TARGET_NAME_index]=$SCI_NAME)">
                                    <!--
                                                <xsl:message>SCI_NAME: <xsl:value-of select="$SCI_NAME"/></xsl:message>
                                    -->
                                    <xsl:variable name="SCI_ID">
                                        <xsl:call-template name="getTargetId">
                                            <xsl:with-param name="name" select="$SCI_NAME" />
                                        </xsl:call-template>
                                    </xsl:variable>

                                    <!-- DO UNIQUE -->
                                    <targetInfo>
                                        <targetRef>
                                            <xsl:value-of select="$SCI_ID"/>
                                        </targetRef>

                                        <calibrators>
                                            <xsl:for-each select="$CAL_TABLE/DATA/TABLEDATA/TR">

                                                <xsl:variable name="CAL_NAME" select="./TD[position()=$CAL_TARGET_NAME_index]"/>
                                                <!--
                                                                    <xsl:message>CAL_NAME: <xsl:value-of select="$CAL_NAME"/></xsl:message>
                                                -->
                                                <xsl:if test="$CAL_NAME != '' and ./TD[position()=$SCI_TARGET_NAME_index] = $SCI_NAME">
                                                    <xsl:variable name="CAL_ID">
                                                        <xsl:call-template name="getTargetId">
                                                            <xsl:with-param name="name" select="$CAL_NAME" />
                                                        </xsl:call-template>
                                                    </xsl:variable>

                                                    <xsl:value-of select="$CAL_ID"/>
                                                    <xsl:value-of select="' '"/>
                                                </xsl:if>
                                            </xsl:for-each>
                                        </calibrators>
                                    </targetInfo>
                                </xsl:if>
                            </xsl:for-each>
                        </targetUserInfos>

                    </xsl:otherwise>
                </xsl:choose>
            </xsl:if>

            <xsl:if test="$CONFIGURATIONS != ''">
                <variant>
                    <stations>
                        <xsl:value-of select="$CONFIGURATIONS"/>
                    </stations>
                </variant>
            </xsl:if>

            <!-- GUI context -->
            <!-- Note: topcat convert boolean to 'F' instead of 'false' -->
            <context>
                <operation>
                    <xsl:choose>
                        <xsl:when test="$CTX_OPERATION != '' and ($CTX_OPERATION = 'NEW' or $CTX_OPERATION = 'ADD')">
                            <xsl:value-of select="$CTX_OPERATION"/>
                        </xsl:when>
                        <xsl:otherwise>ADD</xsl:otherwise>
                    </xsl:choose>
                </operation>

                <!-- Main settings -->
                <interferometerEditable>
                    <xsl:choose>
                        <xsl:when test="$CTX_INTERFEROMETER_EDITABLE = 'false' or $CTX_INTERFEROMETER_EDITABLE = 'F'">false</xsl:when>
                        <xsl:otherwise>true</xsl:otherwise>
                    </xsl:choose>
                </interferometerEditable>

                <periodEditable>
                    <xsl:choose>
                        <xsl:when test="$CTX_PERIOD_EDITABLE = 'false' or $CTX_PERIOD_EDITABLE = 'F'">false</xsl:when>
                        <xsl:otherwise>true</xsl:otherwise>
                    </xsl:choose>
                </periodEditable>

                <instrumentEditable>
                    <xsl:choose>
                        <xsl:when test="$CTX_INSTRUMENT_EDITABLE = 'false' or $CTX_INSTRUMENT_EDITABLE = 'F'">false</xsl:when>
                        <xsl:otherwise>true</xsl:otherwise>
                    </xsl:choose>
                </instrumentEditable>

                <!-- POPS (CHARA only) -->
                <popsEditable>
                    <xsl:choose>
                        <xsl:when test="$CTX_POPS_EDITABLE = 'false' or $CTX_POPS_EDITABLE = 'F'">false</xsl:when>
                        <xsl:otherwise>true</xsl:otherwise>
                    </xsl:choose>
                </popsEditable>

                <!-- Configuration(s) -->
                <configurationsEditable>
                    <xsl:choose>
                        <xsl:when test="$CTX_CONFIGURATIONS_EDITABLE = 'false' or $CTX_CONFIGURATIONS_EDITABLE = 'F'">false</xsl:when>
                        <xsl:otherwise>true</xsl:otherwise>
                    </xsl:choose>
                </configurationsEditable>

                <!-- Constraints -->
                <nightEditable>
                    <xsl:choose>
                        <xsl:when test="$CTX_NIGHT_EDITABLE = 'false' or $CTX_NIGHT_EDITABLE = 'F'">false</xsl:when>
                        <xsl:otherwise>true</xsl:otherwise>
                    </xsl:choose>
                </nightEditable>

                <dateEditable>
                    <xsl:choose>
                        <xsl:when test="$CTX_DATE_EDITABLE = 'false' or $CTX_DATE_EDITABLE = 'F'">false</xsl:when>
                        <xsl:otherwise>true</xsl:otherwise>
                    </xsl:choose>
                </dateEditable>

                <minElevationEditable>
                    <xsl:choose>
                        <xsl:when test="$CTX_MIN_ELEVATION_EDITABLE = 'false' or $CTX_MIN_ELEVATION_EDITABLE = 'F'">false</xsl:when>
                        <xsl:otherwise>true</xsl:otherwise>
                    </xsl:choose>
                </minElevationEditable>

                <!-- TARGETS -->
                <targetsEditable>
                    <xsl:choose>
                        <xsl:when test="$CTX_TARGETS_EDITABLE = 'false' or $CTX_TARGETS_EDITABLE = 'F'">false</xsl:when>
                        <xsl:otherwise>true</xsl:otherwise>
                    </xsl:choose>
                </targetsEditable>

            </context>

            <!-- custom configuration -->
            <xsl:if test="($INTERFEROMETER != '' or $PERIOD != '') and $INSTRUMENT != '' and $CONFIGURATIONS != ''">
                <extendedConfiguration>
                    <!-- extract version from PERIOD (interferometer + version) -->
                    <xsl:variable name="VERSION" select="substring-after($PERIOD, concat($INTERFEROMETER, ' '))" />

                    <xsl:if test="$VERSION != ''">
                        <version>
                            <xsl:value-of select="$VERSION"/>
                        </version>
                    </xsl:if>

                    <interferometer>
                        <xsl:value-of select="$INTERFEROMETER"/>
                    </interferometer>

                    <instrument>
                        <focalInstrument>
                            <xsl:value-of select="$INSTRUMENT"/>
                        </focalInstrument>

                        <configuration>
                            <stations>
                                <xsl:value-of select="$CONFIGURATIONS"/>
                            </stations>

                            <xsl:if test="$BEAMS != ''">
                                <channels>
                                    <xsl:value-of select="$BEAMS"/>
                                </channels>
                            </xsl:if>

                            <xsl:if test="$POPS != ''">
                                <!-- get each character as tokens -->
                                <xsl:variable name="splitPOPS">
                                    <xsl:call-template name="str_split">
                                        <xsl:with-param name="string" select="$POPS" />
                                        <xsl:with-param name="pattern" select="''" />
                                    </xsl:call-template>
                                </xsl:variable>
                                <pops>
                                    <xsl:for-each select="exslt:node-set($splitPOPS)/token">PoP<xsl:value-of select="text()"/>
                                        <xsl:value-of select="' '"/>
                                    </xsl:for-each>
                                </pops>
                            </xsl:if>

                        </configuration>
                    </instrument>

                </extendedConfiguration>
            </xsl:if>

        </a:observationSetting>

    </xsl:template>



    <!-- VOTable Field Index finder (do return only one index of matching field)-->
    <xsl:template name="getColumnIndex">
        <xsl:param name="ucd11"/>
        <xsl:param name="ucd10"/>
        <xsl:param name="name"/>
        <xsl:param name="unit"/>
        <xsl:param name="unit_other"/>
        <xsl:param name="utype"/>

        <xsl:variable name="selNodeId">
            <xsl:choose>
                <xsl:when test="$unit_other">
                    <xsl:value-of select="generate-id($TABLES/FIELD[(contains(@unit, $unit) or contains(@unit, $unit_other)) and (contains(@ucd, $ucd11) or contains(@ucd, $ucd10))])" />
                </xsl:when>
                <xsl:when test="$unit">
                    <xsl:value-of select="generate-id($TABLES/FIELD[contains(@unit, $unit) and (contains(@ucd, $ucd11) or contains(@ucd, $ucd10))])" />
                </xsl:when>
                <xsl:when test="$name">
                    <xsl:value-of select="generate-id($TABLES/FIELD[@name = $name and (@ucd = $ucd11 or @ucd = $ucd10)])" />
                </xsl:when>
                <xsl:otherwise>
                    <xsl:value-of select="generate-id($TABLES/FIELD[@ucd = $ucd11 or @ucd = $ucd10 or @name = $name or @utype = $utype ])" />
                </xsl:otherwise>
            </xsl:choose>
        </xsl:variable>

        <xsl:if test="$selNodeId != ''">
            <!-- double loop to get position() correspond to the parent table fields -->
            <xsl:for-each select="$TABLES">
                <xsl:for-each select="./FIELD">
                    <xsl:if test="$selNodeId = generate-id(.)">
                        <xsl:value-of select="position()" />
                    </xsl:if>
                </xsl:for-each>
            </xsl:for-each>
        </xsl:if>

    </xsl:template>

    <xsl:template name="getGroupIndexes">
        <xsl:param name="ucd11" select="'~~'"/>
        <xsl:param name="ucd10" select="'~~'"/>
        <xsl:param name="name" select="'~~'"/>
        <xsl:param name="unit" select="'~~'"/>
        <xsl:param name="unit_other" select="'~~'"/>
        <xsl:param name="utype" select="'~~'"/>

        <xsl:for-each select="$TABLES/FIELD">
            <!--xsl:choose>
                <xsl:when test="(contains(@unit, $unit) or contains(@unit, $unit_other)) and (contains(@ucd, $ucd11) or contains(@ucd, $ucd10))">
                    <xsl:value-of select="position()"/>
                </xsl:when>
                <xsl:when test="contains(@unit, $unit) and (contains(@ucd, $ucd11) or contains(@ucd, $ucd10))">
                    <xsl:value-of select="position()"/>
                </xsl:when>
                <xsl:when test="@name = $name and (@ucd = $ucd11 or @ucd = $ucd10)">
                    <xsl:value-of select="position()"/>
                </xsl:when>

                <xsl:when test="@ucd = $ucd11 or @ucd = $ucd10 or @name = $name or @utype = $utype">
                    <xsl:value-of select="position()"/>
                </xsl:when>
                <xsl:otherwise>
                </xsl:otherwise>
            </xsl:choose-->

            <xsl:if test="@ucd = $ucd11 or @ucd = $ucd10 or @name = $name or @utype = $utype">
                <pos>
                    <xsl:value-of select="position()"/>
                </pos>
            </xsl:if>

        </xsl:for-each>
    </xsl:template>


    <!-- get Equinox (= 2000) from COOSYS only if system = 'eq_FK5' and epoch = equinox = J2000 -->
    <xsl:template name="getEquinoxFromCooSys">
        <xsl:param name="COOSYS"/>

        <xsl:variable name="COOSYS_EQUINOX" select="number(translate($COOSYS/@equinox, 'J', ''))" />
        <xsl:variable name="COOSYS_EPOCH"   select="number(translate($COOSYS/@epoch, 'J', ''))" />
        <xsl:choose>
            <!-- not supported coordinate frame -->
            <xsl:when test="$COOSYS/@system and $COOSYS/@system != 'eq_FK5'"></xsl:when>
            <xsl:when test="$COOSYS_EQUINOX != NaN and $COOSYS_EQUINOX != 2000"></xsl:when>
            <xsl:when test="$COOSYS_EPOCH != NaN and $COOSYS_EPOCH != 2000"></xsl:when>
            <xsl:otherwise>2000.0</xsl:otherwise>
        </xsl:choose>
    </xsl:template>




    <!-- target id generator: suppress invalid charaters in xml:id -->
    <xsl:template name="getTargetId">
        <xsl:param name="name" select="''" />
        <xsl:value-of select="translate($name, ' &lt;&gt;?,;:/!*%$^&amp;~#{[|`\^@]}°', '______________________________')" />
    </xsl:template>

    <!-- color generator (basic)-->
    <xsl:variable name="colors">
        <tables>
            <colors id="w3-colors-2021">
                <color id="1" hex="#FDAC53"/>
                <color id="2" hex="#9BB7D4"/>
                <color id="3" hex="#B55A30"/>
                <color id="4" hex="#F5DF4D"/>
                <color id="5" hex="#0072B5"/>
                <color id="6" hex="#A0DAA9"/>
                <color id="7" hex="#E9897E"/>
                <color id="8" hex="#00A170"/>
                <color id="9" hex="#926AA6"/>
                <color id="10" hex="#D2386C"/>
                <color id="11" hex="#363945"/>
                <color id="12" hex="#939597"/>
                <color id="13" hex="#EFE1CE"/>
                <color id="14" hex="#E0B589"/>
                <color id="15" hex="#9A8B4F"/>
            </colors>
        </tables>
    </xsl:variable>

    <xsl:template name="getColor">
        <xsl:param name="idx" select="''" />
        <xsl:param name="table" select="'w3-colors-2021'" />
        <xsl:value-of select="exslt:node-set($colors)//colors[@id=$table]/color[@id = $idx mod count(../color) ]/@hex" />
    </xsl:template>

    <!-- str:split template from http://exslt.org/strings -->

    <xsl:template name="str_split">
        <xsl:param name="string" select="''" />
        <xsl:param name="pattern" select="' '" />
        <xsl:choose>
            <xsl:when test="not($string)" />
            <xsl:when test="not($pattern)">
                <xsl:call-template name="str__split-characters">
                    <xsl:with-param name="string" select="$string" />
                </xsl:call-template>
            </xsl:when>
            <xsl:otherwise>
                <xsl:call-template name="str__split-pattern">
                    <xsl:with-param name="string" select="$string" />
                    <xsl:with-param name="pattern" select="$pattern" />
                </xsl:call-template>
            </xsl:otherwise>
        </xsl:choose>

    </xsl:template>

    <xsl:template name="str__split-characters">
        <xsl:param name="string" />
        <xsl:if test="$string">
            <token>
                <xsl:value-of select="substring($string, 1, 1)" />
            </token>

            <xsl:call-template name="str__split-characters">
                <xsl:with-param name="string" select="substring($string, 2)" />
            </xsl:call-template>
        </xsl:if>

    </xsl:template>

    <xsl:template name="str__split-pattern">
        <xsl:param name="string" />
        <xsl:param name="pattern" />
        <xsl:choose>
            <xsl:when test="contains($string, $pattern)">
                <xsl:if test="not(starts-with($string, $pattern))">
                    <token>
                        <xsl:value-of select="substring-before($string, $pattern)" />
                    </token>
                </xsl:if>

                <xsl:call-template name="str__split-pattern">
                    <xsl:with-param name="string" select="substring-after($string, $pattern)" />
                    <xsl:with-param name="pattern" select="$pattern" />
                </xsl:call-template>
            </xsl:when>
            <xsl:otherwise>
                <token>
                    <xsl:value-of select="$string" />
                </token>
            </xsl:otherwise>
        </xsl:choose>

    </xsl:template>




</xsl:stylesheet>
