/*******************************************************************************
 * JMMC project ( http://www.jmmc.fr ) - Copyright (C) CNRS.
 ******************************************************************************/
package fr.jmmc.aspro.gui;

import fr.jmmc.aspro.gui.action.ExportOIFitsAction;
import fr.jmmc.aspro.model.ObservationManager;
import fr.jmmc.aspro.model.event.OIFitsEvent;
import fr.jmmc.aspro.model.event.ObservationEvent;
import fr.jmmc.aspro.model.event.ObservationListener;
import fr.jmmc.jmcs.gui.component.Disposable;
import fr.jmmc.oiexplorer.core.gui.PDFExportable;
import fr.jmmc.oiexplorer.core.gui.PlotChartPanel;
import fr.jmmc.oiexplorer.core.gui.PlotEditor;
import fr.jmmc.oiexplorer.core.gui.chart.PDFOptions;
import fr.jmmc.oiexplorer.core.model.OIFitsCollectionManager;
import fr.jmmc.oiexplorer.core.model.PlotDefinitionFactory;
import fr.jmmc.oiexplorer.core.model.event.EventNotifier;
import fr.jmmc.oiexplorer.core.model.oi.Plot;
import fr.jmmc.oiexplorer.core.model.oi.SubsetDefinition;
import fr.jmmc.oiexplorer.core.model.oi.TargetUID;
import fr.jmmc.oiexplorer.core.model.plot.ColorMapping;
import fr.jmmc.oiexplorer.core.model.plot.PlotDefinition;
import fr.jmmc.oitools.model.OIFitsFile;
import java.util.List;
import org.jfree.chart.JFreeChart;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * This panel embeds the OIFitsExplorer into Aspro2
 * @author bourgesl
 */
public final class OIFitsViewPanel extends javax.swing.JPanel implements Disposable, ObservationListener, PDFExportable {

    /** default serial UID for Serializable interface */
    private static final long serialVersionUID = 1;
    /** Class logger */
    private static final Logger logger = LoggerFactory.getLogger(OIFitsViewPanel.class.getName());

    /* members */
    /** OIFitsCollectionManager singleton */
    private OIFitsCollectionManager ocm = OIFitsCollectionManager.getInstance();
    /** Oifits explorer Plot editor */
    private PlotEditor plotEditor;
    /** Oifits explorer Plot chart panel */
    private PlotChartPanel plotChartPanel;

    /**
     * Constructor
     */
    public OIFitsViewPanel() {
        initComponents();

        postInit();
    }

    /**
     * Free any ressource or reference to this instance:
     * remove the plot chart panel from OIFitsCollectionManager event notifiers 
     * and this instance from ObservationManager listeners
     * 
     * @see PlotChartPanel#dispose() 
     */
    @Override
    public void dispose() {
        // forward dispose() to child components:
        if (plotEditor != null) {
            plotEditor.dispose();
        }
        if (plotChartPanel != null) {
            plotChartPanel.dispose();
        }

        // unregister the OIFits viewer panel for the next event :
        ObservationManager.getInstance().unregister(this);
    }

    /**
     * This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    jPanelCenter = new javax.swing.JPanel();
    jLabelMessage = new javax.swing.JLabel();

    setLayout(new java.awt.BorderLayout());

    jPanelCenter.setBackground(new java.awt.Color(255, 255, 255));
    jPanelCenter.setLayout(new javax.swing.BoxLayout(jPanelCenter, javax.swing.BoxLayout.Y_AXIS));

    jLabelMessage.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    jLabelMessage.setText("LABEL");
    jLabelMessage.setAlignmentX(0.5F);
    jPanelCenter.add(jLabelMessage);

    add(jPanelCenter, java.awt.BorderLayout.CENTER);
  }// </editor-fold>//GEN-END:initComponents

    /**
     * Export the chart component as a PDF document
     */
    @Override
    public void performPDFAction() {
        this.plotChartPanel.performPDFAction();
    }

    /**
     * Return the PDF default file name
     * @return PDF default file name
     */
    @Override
    public String getPDFDefaultFileName() {
        return this.plotChartPanel.getPDFDefaultFileName();
    }

    /**
     * Prepare the chart(s) before exporting them as a PDF document:
     * Performs layout and return PDF options
     * @return PDF options
     */
    public PDFOptions preparePDFExport() {
        return this.plotChartPanel.preparePDFExport();
    }

    /**
     * Return the chart to export on the given page index
     * @param pageIndex page index (1..n)
     * @return chart
     */
    @Override
    public JFreeChart prepareChart(final int pageIndex) {
        return this.plotChartPanel.prepareChart(pageIndex);
    }

    /**
     * Callback indicating the chart was processed by the PDF engine
     */
    @Override
    public void postPDFExport() {
        this.plotChartPanel.postPDFExport();
    }

    /**
     * This method is useful to set the models and specific features of initialized swing components :
     */
    private void postInit() {
        ocm.start();

        this.plotChartPanel = new PlotChartPanel();
        this.plotEditor = new PlotEditor();

        this.jPanelCenter.add(this.plotChartPanel);

        add(this.plotEditor, java.awt.BorderLayout.SOUTH);

        // define which plot to use:
        final String plotId = OIFitsCollectionManager.CURRENT_VIEW;

        plotEditor.initialize(plotId);
        this.plotChartPanel.setPlotId(plotId);
    }

    /**
     * Handle the changed event to plot the new OIFits data synchronously.
     * @param event event
     */
    @Override
    public void onProcess(final ObservationEvent event) {
        if (logger.isDebugEnabled()) {
            logger.debug("event [{}] process IN", event.getType());
        }
        switch (event.getType()) {
            case OIFITS_DONE:
                if (event instanceof OIFitsEvent) {
                    this.plot(((OIFitsEvent) event).getOIFitsList());
                }
                break;
            default:
        }
        if (logger.isDebugEnabled()) {
            logger.debug("event [{}] process OUT", event.getType());
        }
    }

    /**
     * Plot OIFits data using embedded OIFitsExplorer Plot panel
     * This code must be executed by the Swing Event Dispatcher thread (EDT)
     * @param oiFitsList OIFits files to use
     */
    private void plot(final List<OIFitsFile> oiFitsList) {
        logger.debug("plot : {}", oiFitsList);

        if (oiFitsList == null) {
            this.jLabelMessage.setText("No OIFits data available: the target is not observable.");
            showMessage(true);

            // reset:
            ocm.reset();

        } else {
            // Fix file paths ie generate file names ?
            for (OIFitsFile oiFitsFile : oiFitsList) {
                oiFitsFile.setAbsoluteFilePath(ExportOIFitsAction.getDefaultFileName(oiFitsFile));
            }

            // reset and update oifits collection:
            ocm.reset();

            for (OIFitsFile oiFitsFile : oiFitsList) {
                ocm.addOIFitsFile(oiFitsFile);
            }

            // get current subset definition (copy):
            final SubsetDefinition subsetDefinition = ocm.getCurrentSubsetDefinition();
            // Extract the single target from any OIFitsFile:
            final TargetUID target = new TargetUID(oiFitsList.get(0).getOiTarget().getTarget()[0]);

            subsetDefinition.setTarget(target);
            // use all data files (default):
            // subset.getTables().clear();

            // fire subset changed event (generates OIFitsSubset and then plot asynchronously):
            ocm.updateSubsetDefinition(this, subsetDefinition);

            // Copy plotDef into current plot def:
            final PlotDefinition plotDefinition = ocm.getCurrentPlotDefinition();

            plotDefinition.copy(PlotDefinitionFactory.getInstance().getDefault(PlotDefinitionFactory.PLOT_DEFAULT));
            // show flagged data:
            plotDefinition.setSkipFlaggedData(false);
            // use configuration color mapping if useful then wavelength mapping:
            plotDefinition.setColorMapping(ColorMapping.CONFIGURATION);

            ocm.updatePlotDefinition(this, plotDefinition);

            // external configuration:
            final Plot plot = ocm.getCurrentPlot();

            plot.setSubsetDefinition(subsetDefinition);
            plot.setPlotDefinition(plotDefinition);

            ocm.updatePlot(this, plot);

            EventNotifier.addCallback(new Runnable() {
                public void run() {
                    final boolean hasData = plotChartPanel.isHasData();
                    if (!hasData) {
                        jLabelMessage.setText("No OIFits data available: the target has no model or the OIFits computation is in progress.");
                    }

                    showMessage(!hasData);
                }
            });
        }
    }

    /**
     * Show message or plot
     * @param show flag to indicate to show label
     */
    private void showMessage(final boolean show) {
        this.jLabelMessage.setVisible(show);
        this.plotChartPanel.setVisible(!show);
        this.plotEditor.setVisible(!show);
    }
  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JLabel jLabelMessage;
  private javax.swing.JPanel jPanelCenter;
  // End of variables declaration//GEN-END:variables
}
